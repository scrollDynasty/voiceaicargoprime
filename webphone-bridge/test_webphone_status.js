/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ WebPhone —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */

require('dotenv').config();
const SDK = require('@ringcentral/sdk').SDK;
const WebPhone = require('ringcentral-web-phone').default;

// WebSocket –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Node.js
global.WebSocket = require('ws');

// Navigator –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Node.js
global.navigator = global.navigator || {
    userAgent: 'RingCentral-WebPhone-Bridge/1.0.0 (Node.js)',
    appName: 'RingCentral WebPhone Bridge',
    appVersion: '1.0.0'
};

const config = {
    clientId: process.env.RINGCENTRAL_CLIENT_ID,
    clientSecret: process.env.RINGCENTRAL_CLIENT_SECRET,
    jwtToken: process.env.RINGCENTRAL_JWT_TOKEN,
    server: process.env.RINGCENTRAL_SERVER
};

async function testWebPhoneRegistration() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ WebPhone...\n');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
        console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral SDK...');
        const rcsdk = new SDK({
            server: config.server,
            clientId: config.clientId,
            clientSecret: config.clientSecret
        });
        
        const platform = rcsdk.platform();
        await platform.login({ jwt: config.jwtToken });
        console.log('‚úÖ RingCentral SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ SIP –¥–∞–Ω–Ω—ã—Ö
        console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ SIP –¥–∞–Ω–Ω—ã—Ö...');
        const response = await platform.post('/restapi/v1.0/client-info/sip-provision', {
            sipInfo: [{ transport: 'WSS' }]
        });
        const sipProvisionData = await response.json();
        const sipInfo = sipProvisionData.sipInfo[0];
        console.log(`‚úÖ SIP –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${sipInfo.username}@${sipInfo.domain}\n`);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ WebPhone
        console.log('3. –°–æ–∑–¥–∞–Ω–∏–µ WebPhone...');
        const webPhone = new WebPhone({
            sipInfo: sipInfo,
            userAgent: 'RingCentral-WebPhone-Test/1.0.0',
            logLevel: 1
        });
        
        console.log('‚úÖ WebPhone —Å–æ–∑–¥–∞–Ω\n');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        let registrationAttempted = false;
        let registrationSuccessful = false;
        
        webPhone.on('registering', () => {
            registrationAttempted = true;
            console.log('üîÑ WebPhone –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...');
        });
        
        webPhone.on('registered', () => {
            registrationSuccessful = true;
            console.log('‚úÖ WebPhone —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
        });
        
        webPhone.on('registrationFailed', (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        });
        
        // –ó–∞–ø—É—Å–∫ WebPhone
        console.log('4. –ó–∞–ø—É—Å–∫ WebPhone...');
        await webPhone.start();
        console.log('‚úÖ WebPhone –∑–∞–ø—É—â–µ–Ω');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        console.log('4.1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...');
        if (webPhone.sipClient && webPhone.sipClient.register) {
            await webPhone.sipClient.register();
            console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞\n');
        } else {
            console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ register –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
        }
        
        // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        console.log('5. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (30 —Å–µ–∫—É–Ω–¥)...');
        
        for (let i = 0; i < 30; i++) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            if (registrationSuccessful) {
                console.log('üéâ –£–°–ü–ï–•: WebPhone –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
                process.exit(0);
            }
            
            if (i % 5 === 0) {
                console.log(`‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ... ${30 - i} —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å`);
            }
        }
        
        if (registrationAttempted) {
            console.log('‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥');
        } else {
            console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if (webPhone.sipClient && webPhone.sipClient.stop) {
            await webPhone.sipClient.stop();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

testWebPhoneRegistration();