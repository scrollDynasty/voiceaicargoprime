/**
 * RingCentral WebPhone Bridge
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ Python Voice AI —Å–∏—Å—Ç–µ–º—É
 */

require('dotenv').config();
const SDK = require('@ringcentral/sdk').SDK;
const WebPhone = require('ringcentral-web-phone').default;
const axios = require('axios');
const WebSocket = require('ws');
const winston = require('winston');
const { v4: uuidv4 } = require('uuid');
const express = require('express');

// WebSocket –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Node.js
global.WebSocket = WebSocket;

// Navigator –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Node.js (–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è WebPhone)
global.navigator = global.navigator || {
    userAgent: 'RingCentral-WebPhone-Bridge/1.0.0 (Node.js)',
    appName: 'RingCentral WebPhone Bridge',
    appVersion: '1.0.0'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message }) => {
            return `${timestamp} [${level.toUpperCase()}] ${message}`;
        })
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'webphone-bridge.log' })
    ]
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    clientId: process.env.RINGCENTRAL_CLIENT_ID || 'bXCZ510zNmybxAUXGIZruT',
    clientSecret: process.env.RINGCENTRAL_CLIENT_SECRET || '10hW9ccNfhyc1y69bQzdgnVUnFyf76B6qcmwOtypEGo7',
    jwtToken: process.env.RINGCENTRAL_JWT_TOKEN || 'eyJraWQiOiI4NzYyZjU5OGQwNTk0NGRiODZiZjVjYTk3ODA0NzYwOCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJhdWQiOiJodHRwczovL3BsYXRmb3JtLnJpbmdjZW50cmFsLmNvbS9yZXN0YXBpL29hdXRoL3Rva2VuIiwic3ViIjoiMjA2OTkwOTAxOSIsImlzcyI6Imh0dHBzOi8vcGxhdGZvcm0ucmluZ2NlbnRyYWwuY29tIiwiZXhwIjozOTAzNjUxMzQyLCJpYXQiOjE3NTYxNjc2OTUsImp0aSI6IlpTckJuOHlFVDJLeEFjOXhmTlZ6ZncifQ.fHF6mXLa9wHygLYiFVQzIo4bKT8niwnYKD7PT7gFGoayZpDOkHwamesmXunn_IIY3rRT9Z2hXHgaJpdpW5ZRimaYOydcjGpj1HgdOxmTRBcYj6B4HWXb9YXO95Q2sfFLPS-3DwvcxeqNW8yoX3Cx31VpCfsybrvwq1NtDO73KulJYPByTSjoLQMj5to5gxRtKlqbhabj1o4YaeKkKb70_Sr-T0lXQS_93fOaPi0xP_AYNhDmDEQBZc1tvwUF7-ETj2Bv-EnfH5OxWfbRS3bSnZdRs1P-0TJg6SfNgwlAGNnMqEdpVyBMXt-02aQA8xgo1O9RDI-nSUXd2iKaA5CTAg',
    server: process.env.RINGCENTRAL_SERVER || 'https://platform.ringcentral.com',
    pythonServer: process.env.PYTHON_AI_SERVER || 'http://localhost:5000',
    pythonEndpoint: process.env.PYTHON_AI_ENDPOINT || '/api/handle-webphone-call',
    wsPort: parseInt(process.env.WEBSOCKET_PORT || '8081'),
    audioSampleRate: parseInt(process.env.AUDIO_SAMPLE_RATE || '16000'),
    audioChannels: parseInt(process.env.AUDIO_CHANNELS || '1'),
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    reconnectAttempts: 5,
    reconnectDelay: 5000,
    healthCheckInterval: 30000,
    callTimeout: 300000, // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
    maxConcurrentCalls: 5
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let rcsdk = null;
let webPhone = null;
let platform = null;
let activeCalls = new Map();
let wsServer = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
let isRunning = false;
let reconnectAttempts = 0;
let healthCheckTimer = null;
let lastHealthCheck = null;
let isWebPhoneRegistered = false; // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ WebPhone

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral SDK
 */
async function initializeRingCentral() {
    logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral SDK...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º SDK
        rcsdk = new SDK({
            clientId: config.clientId,
            clientSecret: config.clientSecret,
            server: config.server
        });
        
        platform = rcsdk.platform();
        
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT
        logger.info('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω...');
        await platform.login({
            jwt: config.jwtToken
        });
        
        logger.info('‚úÖ RingCentral SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏
        const extensionInfo = await platform.get('/restapi/v1.0/account/~/extension/~');
        const extension = await extensionInfo.json();
        logger.info(`üìû –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: ${extension.extensionNumber}`);
        logger.info(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${extension.name}`);
        
        // Device ID –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SIP Provision API
        logger.info('üì± Device ID –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SIP Provision API');
        
        return true;
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RingCentral: ${error.message}`);
        return false;
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebPhone
 */
async function initializeWebPhone() {
    logger.info('üìû –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebPhone...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é WebPhone SDK
    try {
        const webPhonePackage = require('ringcentral-web-phone/package.json');
        logger.info(`üì¶ WebPhone SDK –≤–µ—Ä—Å–∏—è: ${webPhonePackage.version}`);
    } catch (error) {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é WebPhone SDK');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebPhone SDK
    if (!WebPhone) {
        logger.error('‚ùå WebPhone SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return false;
    }
    
    logger.info(`üîß WebPhone –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${typeof WebPhone}`);
    logger.info(`üîß WebPhone –ø—Ä–æ—Ç–æ—Ç–∏–ø: ${Object.keys(WebPhone.prototype || {}).join(', ')}`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ SIP –¥–∞–Ω–Ω—ã–µ
        const sipProvisionData = await getSipProvisionData();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º sipInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        const sipInfo = sipProvisionData.sipInfo[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É sipInfo
        logger.info('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ sipInfo:', JSON.stringify(sipInfo, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const requiredFields = ['username', 'password', 'domain', 'outboundProxy'];
        const missingFields = requiredFields.filter(field => !sipInfo[field]);
        
        if (missingFields.length > 0) {
            logger.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ sipInfo: ${missingFields.join(', ')}`);
            throw new Error(`–ù–µ–ø–æ–ª–Ω—ã–µ SIP –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ${missingFields.join(', ')}`);
        }
        
        // –°–æ–∑–¥–∞–µ–º WebPhone –∏–Ω—Å—Ç–∞–Ω—Å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const webPhoneConfig = {
            logLevel: 1, // 0 = Trace, 1 = Debug, 2 = Info, 3 = Warn, 4 = Error
            audioHelper: {
                enabled: true
            },
            media: {
                remote: null, // –í headless —Ä–µ–∂–∏–º–µ –±–µ–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                local: null
            }
        };
        
        logger.info('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebPhone:', JSON.stringify(webPhoneConfig, null, 2));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ SIP –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ sipInfo[0]
        logger.info('‚úÖ –°–æ–∑–¥–∞–µ–º WebPhone —Å –ø–æ–ª–Ω—ã–º–∏ SIP –¥–∞–Ω–Ω—ã–º–∏...');
        
        // –°–æ–∑–¥–∞–µ–º WebPhone —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        // WebPhone –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º sipInfo
        const webPhoneOptions = {
            sipInfo: sipInfo,
            logLevel: webPhoneConfig.logLevel,
            audioHelper: webPhoneConfig.audioHelper,
            media: webPhoneConfig.media,
            appName: 'RingCentral WebPhone Bridge',
            appVersion: '1.0.0',
            userAgent: 'RingCentral-WebPhone-Bridge/1.0.0'
        };
        
        logger.info('üîß WebPhone –æ–ø—Ü–∏–∏:', JSON.stringify(webPhoneOptions, null, 2));
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å WebPhone —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        try {
            logger.info('üîß –°–æ–∑–¥–∞–µ–º WebPhone —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏...');
            webPhone = new WebPhone(webPhoneOptions);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebPhone: ${error.message}`);
            logger.error(`‚ùå Stack trace: ${error.stack}`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
            logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebPhone...');
            try {
                webPhone = new WebPhone({
                    sipInfo: sipInfo,
                    logLevel: 1,
                    appName: 'RingCentral WebPhone Bridge',
                    appVersion: '1.0.0',
                    userAgent: 'RingCentral-WebPhone-Bridge/1.0.0'
                });
            } catch (secondError) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${secondError.message}`);
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebPhone...');
                webPhone = new WebPhone({
                    sipInfo: sipInfo,
                    userAgent: 'RingCentral-WebPhone-Bridge/1.0.0'
                });
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É WebPhone –æ–±—ä–µ–∫—Ç–∞
        logger.info('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebPhone –æ–±—ä–µ–∫—Ç–∞:');
        logger.info(`   - webPhone: ${typeof webPhone}`);
        logger.info(`   - webPhone keys: ${Object.keys(webPhone || {}).join(', ')}`);
        
        // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ SDK userAgent –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ sipClient
        if (webPhone.sipClient) {
            logger.info('‚úÖ –ù–∞–π–¥–µ–Ω sipClient –≤ WebPhone');
            logger.info(`üîç sipClient —Å–≤–æ–π—Å—Ç–≤–∞: ${Object.keys(webPhone.sipClient).join(', ')}`);
            webPhone.userAgent = webPhone.sipClient;
        } else if (webPhone.userAgent) {
            logger.info('‚úÖ –ù–∞–π–¥–µ–Ω userAgent –≤ WebPhone');
        } else {
            logger.warn('‚ö†Ô∏è userAgent –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ WebPhone —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É userAgent –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            webPhone.userAgent = {
                state: 'unknown',
                isRegistered: () => false,
                start: () => Promise.resolve(),
                register: () => Promise.resolve(),
                stop: () => Promise.resolve(),
                unregister: () => Promise.resolve()
            };
        }
        
        logger.info('‚úÖ userAgent —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã WebPhone
        logger.info('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ WebPhone –æ–±—ä–µ–∫—Ç–∞:');
        logger.info(`   - webPhone: ${typeof webPhone}`);
        logger.info(`   - userAgent: ${typeof webPhone.userAgent}`);
        logger.info(`   - userAgent.state: ${webPhone.userAgent.state}`);
        logger.info(`   - userAgent.isRegistered: ${typeof webPhone.userAgent.isRegistered}`);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupWebPhoneEventHandlers();
        
        // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ WebPhone...');
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            logger.info('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã WebPhone:');
            logger.info(`   - webPhone.start: ${typeof webPhone.start}`);
            logger.info(`   - webPhone.register: ${typeof webPhone.register}`);
            logger.info(`   - webPhone.userAgent.start: ${typeof (webPhone.userAgent && webPhone.userAgent.start)}`);
            logger.info(`   - webPhone.userAgent.register: ${typeof (webPhone.userAgent && webPhone.userAgent.register)}`);
            logger.info(`   - webPhone.sipClient: ${typeof webPhone.sipClient}`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞ WebPhone
            if (webPhone.start) {
                await webPhone.start();
                logger.info('‚úÖ WebPhone –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webPhone.start()');
                
                // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                logger.info('üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é SIP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
                if (webPhone.sipClient && webPhone.sipClient.register) {
                    await webPhone.sipClient.register();
                    logger.info('‚úÖ SIP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ sipClient.register()');
                } else if (webPhone.userAgent && webPhone.userAgent.register) {
                    await webPhone.userAgent.register();
                    logger.info('‚úÖ SIP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ userAgent.register()');
                }
                
            } else if (webPhone.register) {
                await webPhone.register();
                logger.info('‚úÖ WebPhone –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ webPhone.register()');
            } else if (webPhone.userAgent && webPhone.userAgent.start) {
                await webPhone.userAgent.start();
                logger.info('‚úÖ UserAgent –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ userAgent.start()');
            } else if (webPhone.userAgent && webPhone.userAgent.register) {
                await webPhone.userAgent.register();
                logger.info('‚úÖ UserAgent –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ userAgent.register()');
            } else {
                logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ WebPhone, –æ–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            setTimeout(() => {
                const status = getWebPhoneStatus();
                logger.info(`üìä –°—Ç–∞—Ç—É—Å WebPhone –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${JSON.stringify(status)}`);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ sipClient
                if (webPhone.sipClient) {
                    logger.info('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ sipClient:');
                    logger.info(`   - wsc: ${typeof webPhone.sipClient.wsc}`);
                    logger.info(`   - disposed: ${webPhone.sipClient.disposed}`);
                    logger.info(`   - instanceId: ${webPhone.sipClient.instanceId}`);
                    logger.info(`   - timeoutHandle: ${webPhone.sipClient.timeoutHandle}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    if (webPhone.sipClient.wsc) {
                        logger.info(`   - wsc.readyState: ${webPhone.sipClient.wsc.readyState}`);
                        logger.info(`   - wsc.url: ${webPhone.sipClient.wsc.url}`);
                    }
                }
                
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if (webPhone.sipClient && webPhone.sipClient.wsc && webPhone.sipClient.wsc.readyState === 1) {
            logger.info('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            isWebPhoneRegistered = true;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ API
            setTimeout(() => {
                forceDeviceRegistration();
            }, 1000);
        }
            }, 2000);
            
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebPhone: ${error.message}`);
            logger.error(`‚ùå Stack trace: ${error.stack}`);
        }
        
        logger.info('‚úÖ WebPhone —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebPhone: ${error.message}`);
        logger.error(`‚ùå Stack trace: ${error.stack}`);
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ SIP –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è WebPhone
 */
async function getSipProvisionData() {
    try {
        logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SIP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
        
        // –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ SIP provision API
        logger.info('üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ RingCentral...');
        const response = await platform.post('/restapi/v1.0/client-info/sip-provision', {
            sipInfo: [{
                transport: 'WSS'
            }]
        });
        
        const data = await response.json();
        console.log('üîç –ü–û–õ–ù–´–ï SIP –î–ê–ù–ù–´–ï:', JSON.stringify(data, null, 2));
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        if (!data.sipInfo || !data.sipInfo[0]) {
            throw new Error('SIP –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
        }
        
        if (!data.device) {
            throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        }
        
        const sipInfo = data.sipInfo[0];
        const deviceInfo = data.device;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ SIP –¥–∞–Ω–Ω—ã—Ö
        if (!sipInfo.username || !sipInfo.password || !sipInfo.domain) {
            logger.error('‚ùå SIP –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ:', sipInfo);
            throw new Error('SIP –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç username, password –∏–ª–∏ domain');
        }
        
        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
        logger.info(`üì± Device ID: ${deviceInfo.id}`);
        logger.info(`üì± Device Type: ${deviceInfo.type}`);
        logger.info(`üì± Device Status: ${deviceInfo.status}`);
        logger.info(`üì± Extension: ${deviceInfo.extension.extensionNumber}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å—Ç–∞—Ç—É—Å–µ Online
        if (deviceInfo.status !== 'Online') {
            logger.warn(`‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ Online (—Ç–µ–∫—É—â–∏–π: ${deviceInfo.status})`);
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const statusCheckResponse = await platform.get(`/restapi/v1.0/account/~/device/${deviceInfo.id}`);
            const updatedDevice = await statusCheckResponse.json();
            logger.info(`üì± –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${updatedDevice.status}`);
            
            if (updatedDevice.status !== 'Online') {
                logger.warn('‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –Ω–µ Online, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
            }
        }
        
        // –®–∞–≥ 3: –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        logger.info('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ RingCentral');
        logger.info(`üîß SIP Username: ${sipInfo.username}`);
        logger.info(`üîß SIP Domain: ${sipInfo.domain}`);
        logger.info(`üîß SIP Proxy: ${sipInfo.outboundProxy}`);
        logger.info(`üîß Authorization ID: ${sipInfo.authorizationId}`);
        
        // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (data.pollingInterval) {
            logger.info(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${data.pollingInterval} –º—Å`);
            global.devicePollingInterval = data.pollingInterval;
        }
        
        if (data.sipFlags) {
            logger.info(`üö© SIP Flags:`, data.sipFlags);
            global.sipFlags = data.sipFlags;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Device ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        global.registeredDeviceId = deviceInfo.id;
        global.deviceInfo = deviceInfo;
        
        logger.info('‚úÖ SIP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        return data;
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SIP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${error.message}`);
        if (error.response) {
            logger.error(`‚ùå HTTP Status: ${error.response.status}`);
            logger.error(`‚ùå Response: ${JSON.stringify(error.response.data, null, 2)}`);
        }
        throw error;
    }
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 */
async function monitorDeviceStatus() {
    if (!global.registeredDeviceId) {
        logger.warn('‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Device ID –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        return;
    }
    
    try {
        logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${global.registeredDeviceId}...`);
        
        const response = await platform.get(`/restapi/v1.0/account/~/device/${global.registeredDeviceId}`);
        const deviceStatus = await response.json();
        
        logger.info(`üì± –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${deviceStatus.status}`);
        
        if (deviceStatus.status !== 'Online') {
            logger.warn(`‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ Online: ${deviceStatus.status}`);
            logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await attemptDeviceReregistration();
        } else {
            logger.info('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å—Ç–∞—Ç—É—Å–µ Online');
        }
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${error.message}`);
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await attemptDeviceReregistration();
    }
}

/**
 * –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ —Å–±–æ—è—Ö
 */
async function attemptDeviceReregistration() {
    try {
        logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π WebPhone –µ—Å–ª–∏ –µ—Å—Ç—å
        if (webPhone && webPhone.sipClient) {
            try {
                await webPhone.sipClient.stop();
                logger.info('üõë –¢–µ–∫—É—â–∏–π WebPhone –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } catch (stopError) {
                logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WebPhone: ${stopError.message}`);
            }
        }
        
        // –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const sipProvisionData = await getSipProvisionData();
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º WebPhone —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const sipInfo = sipProvisionData.sipInfo[0];
        
        const webPhoneOptions = {
            sipInfo: sipInfo,
            logLevel: 1,
            audioHelper: { enabled: true },
            media: { remote: null, local: null },
            appName: 'RingCentral WebPhone Bridge',
            appVersion: '1.0.0',
            userAgent: 'RingCentral-WebPhone-Bridge/1.0.0'
        };
        
        webPhone = new WebPhone(webPhoneOptions);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupWebPhoneEventHandlers();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º WebPhone
        await webPhone.start();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if (webPhone.sipClient && webPhone.sipClient.register) {
            await webPhone.sipClient.register();
        }
        
        logger.info('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${error.message}`);
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            attemptDeviceReregistration();
        }, 30000); // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
function startDeviceMonitoring() {
    const interval = global.devicePollingInterval || 300000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
    logger.info(`‚è∞ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval/1000} —Å–µ–∫—É–Ω–¥`);
    
    setInterval(async () => {
        await monitorDeviceStatus();
    }, interval);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π WebPhone
 */
function setupWebPhoneEventHandlers() {
    // –°–æ–±—ã—Ç–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    webPhone.on('registering', () => {
        isWebPhoneRegistered = false;
        logger.info('üîÑ WebPhone –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...');
    });
    
    // –°–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    webPhone.on('registered', () => {
        isWebPhoneRegistered = true;
        logger.info('‚úÖ WebPhone –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–≤–æ–Ω–∫–∏');
        logger.info('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏!');
    });
    
    // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    webPhone.on('registrationFailed', (error) => {
        isWebPhoneRegistered = false;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ WebPhone: ${JSON.stringify(error, null, 2)}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (error && error.response && error.response.statusCode === 408) {
            logger.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ 408 (Request Timeout), –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
            setTimeout(() => {
                attemptReconnect();
            }, 10000);
        }
    });
    
    // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    webPhone.on('unregistered', () => {
        isWebPhoneRegistered = false;
        logger.warn('‚ö†Ô∏è WebPhone –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç SIP —Å–µ—Ä–≤–µ—Ä–∞');
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è sipClient
    if (webPhone.sipClient) {
        webPhone.sipClient.on('timeout', () => {
            logger.warn('‚è∞ –¢–∞–π–º–∞—É—Ç sipClient —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            isWebPhoneRegistered = false;
        });
        
        webPhone.sipClient.on('connected', () => {
            logger.info('üîó SipClient –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
            isWebPhoneRegistered = true;
        });
        
        webPhone.sipClient.on('registered', () => {
            logger.info('‚úÖ SipClient –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            isWebPhoneRegistered = true;
        });
        
        webPhone.sipClient.on('disconnected', () => {
            logger.warn('‚ùå SipClient –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            isWebPhoneRegistered = false;
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const originalEmit = webPhone.sipClient.emit;
        webPhone.sipClient.emit = function(...args) {
            const eventName = args[0];
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫—Ä–æ–º–µ —á–∞—Å—Ç—ã—Ö message
            if (eventName !== 'message') {
                logger.info(`üîç SipClient Event: ${eventName}`);
            }
            
            // –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ sipClient
            if (eventName === 'inboundMessage') {
                const message = args[1];
                if (message && typeof message === 'string') {
                    // –ò—â–µ–º SIP INVITE –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    if (message.includes('INVITE ') && message.includes('SIP/2.0')) {
                        logger.info('üîî –û–ë–ù–ê–†–£–ñ–ï–ù –í–•–û–î–Ø–©–ò–ô SIP INVITE!');
                        logger.info(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.substring(0, 300)}...`);
                        
                        // –ü–∞—Ä—Å–∏–º Call-ID –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        const callIdMatch = message.match(/Call-ID:\s*([^\r\n]+)/i);
                        const fromMatch = message.match(/From:\s*([^\r\n]+)/i);
                        const toMatch = message.match(/To:\s*([^\r\n]+)/i);
                        const cseqMatch = message.match(/CSeq:\s*([^\r\n]+)/i);
                        const viaMatch = message.match(/Via:\s*([^\r\n]+)/i);
                        
                        if (callIdMatch) {
                            logger.info(`üìû Call-ID: ${callIdMatch[1]}`);
                            logger.info(`üìû From: ${fromMatch ? fromMatch[1] : 'unknown'}`);
                            logger.info(`üìû To: ${toMatch ? toMatch[1] : 'unknown'}`);
                            
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º 180 Ringing –¥–ª—è –Ω–∞—á–∞–ª–∞
                            try {
                                logger.info('üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 180 Ringing...');
                                const ringingResponse = createSipResponse(message, 180, 'Ringing');
                                if (webPhone.sipClient.wsc && webPhone.sipClient.wsc.readyState === 1) {
                                    webPhone.sipClient.wsc.send(ringingResponse);
                                    logger.info('‚úÖ 180 Ringing –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                                    
                                    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK
                                    setTimeout(() => {
                                        try {
                                            logger.info('üìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–∞...');
                                            const okResponse = createSipResponse(message, 200, 'OK', true);
                                            webPhone.sipClient.wsc.send(okResponse);
                                            logger.info('‚úÖ 200 OK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç!');
                                        } catch (error) {
                                            logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 200 OK: ${error.message}`);
                                        }
                                    }, 2000);
                                }
                            } catch (error) {
                                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ INVITE: ${error.message}`);
                            }
                        }
                    }
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ outbound —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (eventName === 'outboundMessage') {
                const message = args[1];
                if (message && typeof message === 'string') {
                    if (message.includes('REGISTER ')) {
                        logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º REGISTER –∑–∞–ø—Ä–æ—Å');
                    } else if (message.includes('SIP/2.0 200')) {
                        logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK –æ—Ç–≤–µ—Ç');
                    }
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            if (eventName === 'invite' || eventName === 'incoming') {
                logger.info('üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù –í SIPCLIENT EVENT!');
                const session = args[1];
                if (session && session.accept) {
                    logger.info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è...');
                    session.accept().then(() => {
                        logger.info('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç —á–µ—Ä–µ–∑ sipClient —Å–æ–±—ã—Ç–∏—è!');
                    }).catch((error) => {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è: ${error.message}`);
                    });
                }
            }
            
            return originalEmit.apply(this, args);
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SIP –æ—Ç–≤–µ—Ç–æ–≤
        function createSipResponse(originalMessage, statusCode, reasonPhrase, includeSDP = false) {
            const lines = originalMessage.split('\r\n');
            let via = '';
            let from = '';
            let to = '';
            let callId = '';
            let cseq = '';
            let contact = '';
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ INVITE
            for (const line of lines) {
                if (line.startsWith('Via:')) {
                    via = line;
                } else if (line.startsWith('From:')) {
                    from = line;
                } else if (line.startsWith('To:')) {
                    to = line;
                    // –î–æ–±–∞–≤–ª—è–µ–º tag –∫ To –∑–∞–≥–æ–ª–æ–≤–∫—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if (!to.includes('tag=')) {
                        to += `;tag=${Date.now()}`;
                    }
                } else if (line.startsWith('Call-ID:')) {
                    callId = line;
                } else if (line.startsWith('CSeq:')) {
                    cseq = line;
                } else if (line.startsWith('Contact:')) {
                    contact = line;
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            let response = [
                `SIP/2.0 ${statusCode} ${reasonPhrase}`,
                via,
                from,
                to,
                callId,
                cseq
            ];
            
            // –î–æ–±–∞–≤–ª—è–µ–º Contact –¥–ª—è 200 OK
            if (statusCode === 200) {
                response.push('Contact: <sip:15135725833*102@127.0.0.1:5060>');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º SDP –¥–ª—è 200 OK
            if (statusCode === 200 && includeSDP) {
                const sdp = [
                    'v=0',
                    'o=- 123456789 123456789 IN IP4 127.0.0.1',
                    's=-',
                    'c=IN IP4 127.0.0.1',
                    't=0 0',
                    'm=audio 5004 RTP/AVP 0 8',
                    'a=rtpmap:0 PCMU/8000',
                    'a=rtpmap:8 PCMA/8000',
                    'a=sendrecv'
                ].join('\r\n');
                
                response.push('Content-Type: application/sdp');
                response.push(`Content-Length: ${sdp.length}`);
                response.push('');
                response.push(sdp);
            } else {
                response.push('Content-Length: 0');
                response.push('');
            }
            
            return response.join('\r\n');
        }
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    webPhone.on('stateChanged', (state) => {
        logger.info(`üîÑ WebPhone —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${state}`);
        if (state === 'Registered' || state === 'Connected') {
            isWebPhoneRegistered = true;
        } else if (state === 'Unregistered' || state === 'Disconnected') {
            isWebPhoneRegistered = false;
        }
    });
    
    // WebSocket —Å–æ–±—ã—Ç–∏—è sipClient
    if (webPhone.sipClient && webPhone.sipClient.wsc) {
        webPhone.sipClient.wsc.on('open', () => {
            logger.info('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ sipClient –æ—Ç–∫—Ä—ã—Ç–æ');
        });
        
        webPhone.sipClient.wsc.on('close', () => {
            logger.warn('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ sipClient –∑–∞–∫—Ä—ã—Ç–æ');
        });
        
        webPhone.sipClient.wsc.on('error', (error) => {
            logger.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ sipClient: ${error.message}`);
        });
        
        // WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ sipClient.emit –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –≤—ã—à–µ
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
    webPhone.on('call', (call) => {
        logger.info('üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù (call event)!');
        logger.info(`üìû Call ID: ${call.id}`);
        logger.info(`üìû Call direction: ${call.direction}`);
        logger.info(`üìû Call state: ${call.state}`);
        
        if (call.direction === 'incoming') {
            logger.info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫...');
            call.answer().then(() => {
                logger.info('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
            }).catch((error) => {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–∞: ${error.message}`);
            });
        }
    });
    
    // –û–±—â–∏–µ –æ—à–∏–±–∫–∏
    webPhone.on('error', (error) => {
        logger.error(`‚ùå WebPhone –æ—à–∏–±–∫–∞: ${JSON.stringify(error, null, 2)}`);
    });
    
    // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    webPhone.on('connected', () => {
        logger.info('üîå WebPhone –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ SIP —Å–µ—Ä–≤–µ—Ä—É');
        // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        isWebPhoneRegistered = true;
    });
    
    // –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    webPhone.on('ready', () => {
        logger.info('‚úÖ WebPhone –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        isWebPhoneRegistered = true;
    });
    
    // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    webPhone.on('disconnected', () => {
        logger.warn('üîå WebPhone –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç SIP —Å–µ—Ä–≤–µ—Ä–∞');
        isWebPhoneRegistered = false;
    });
    
    // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è UserAgent
    if (webPhone.userAgent) {
        logger.info('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ UserAgent –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤...');
        
        webPhone.userAgent.on('invite', async (session) => {
            logger.info('üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù –í USERAGENT!');
            logger.info(`üìû Session ID: ${session.id}`);
            
            try {
                logger.info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ UserAgent...');
                await session.accept();
                logger.info('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç —á–µ—Ä–µ–∑ UserAgent!');
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
                session.on('accepted', () => {
                    logger.info('‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω');
                });
                
                session.on('terminated', () => {
                    logger.info('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
                });
                
                session.on('failed', (error) => {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞: ${error}`);
                });
                
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ UserAgent: ${error.message}`);
            }
        });
        
        webPhone.userAgent.on('message', (request) => {
            logger.info(`üì® UserAgent Message: ${request.method}`);
        });
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
    webPhone.on('invite', async (session) => {
        logger.info('üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù –í WEBPHONE!');
        logger.info(`üìû Session ID: ${session.id}`);
        logger.info(`üìû From: ${session.request.from.displayName || session.request.from.uri.user}`);
        logger.info(`üìû To: ${session.request.to.displayName || session.request.to.uri.user}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        if (activeCalls.size >= config.maxConcurrentCalls) {
            logger.warn(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (${config.maxConcurrentCalls}). –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫.`);
            try {
                await session.reject();
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: ${err.message}`);
            }
            return;
        }
        logger.info('üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        if (activeCalls.size >= config.maxConcurrentCalls) {
            logger.warn(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (${config.maxConcurrentCalls}). –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫.`);
            try {
                await session.reject();
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: ${err.message}`);
            }
            return;
        }
        
        const callId = uuidv4();
        const fromNumber = session.request.from.displayName || session.request.from.uri.user || 'Unknown';
        const toNumber = session.request.to.displayName || session.request.to.uri.user || 'Unknown';
        
        logger.info(`üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç: ${fromNumber}`);
        logger.info(`üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞: ${toNumber}`);
        logger.info(`üÜî ID –∑–≤–æ–Ω–∫–∞: ${callId}`);
        logger.info(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${activeCalls.size}/${config.maxConcurrentCalls}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        const callData = {
            callId,
            sessionId: session.id,
            from: fromNumber,
            to: toNumber,
            startTime: new Date(),
            session: session,
            audioStream: null,
            wsConnection: null,
            timeout: null // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
        };
        
        activeCalls.set(callId, callData);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫
        callData.timeout = setTimeout(() => {
            logger.warn(`‚è∞ –¢–∞–π–º–∞—É—Ç –∑–≤–æ–Ω–∫–∞ ${callId} (${config.callTimeout}ms)`);
            cleanupCall(callId);
        }, config.callTimeout);
        
        try {
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ü–†–ò–ù–ò–ú–ê–ï–ú –ó–í–û–ù–û–ö
            logger.info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫...');
            await session.accept();
            logger.info('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç!');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
            setupSessionHandlers(session, callId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º Python —Å–µ—Ä–≤–µ—Ä –æ –Ω–æ–≤–æ–º –∑–≤–æ–Ω–∫–µ
            await notifyPythonServer(callData);
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
            startAudioProcessing(session, callId);
            
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∑–≤–æ–Ω–∫–∞: ${error.message}`);
            cleanupCall(callId);
        }
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∑–≤–æ–Ω–∫–∞
 */
function setupSessionHandlers(session, callId) {
    // –ó–≤–æ–Ω–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    session.on('accepted', () => {
        logger.info(`‚úÖ –ó–≤–æ–Ω–æ–∫ ${callId} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    });
    
    // –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
    session.on('terminated', () => {
        logger.info(`üìû –ó–≤–æ–Ω–æ–∫ ${callId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        cleanupCall(callId);
    });
    
    // –û—à–∏–±–∫–∞ –≤ –∑–≤–æ–Ω–∫–µ
    session.on('failed', (error) => {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–≤–æ–Ω–∫–µ ${callId}: ${error}`);
        cleanupCall(callId);
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ DTMF (—Ç–æ–Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä)
    session.on('dtmf', (request, dtmf) => {
        logger.info(`üì± DTMF –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}: ${dtmf}`);
        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ Python –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    });
}

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Python —Å–µ—Ä–≤–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–≤–æ–Ω–∫–µ
 */
async function notifyPythonServer(callData) {
    try {
        const payload = {
            callId: callData.callId,
            sessionId: callData.sessionId,
            from: callData.from,
            to: callData.to,
            timestamp: callData.startTime,
            source: 'webphone'
        };
        
        logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞ –≤ Python: ${config.pythonServer}${config.pythonEndpoint}`);
        
        const response = await axios.post(
            `${config.pythonServer}${config.pythonEndpoint}`,
            payload,
            {
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 5000
            }
        );
        
        logger.info(`‚úÖ Python —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: ${response.status}`);
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Python: ${error.message}`);
    }
}

/**
 * –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
 */
function startAudioProcessing(session, callId) {
    logger.info(`üé§ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
    
    const callData = activeCalls.get(callId);
    if (!callData) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
    const localStream = session.localMediaStream;
    const remoteStream = session.remoteMediaStream;
    
    if (remoteStream) {
        logger.info(`üéß –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω`);
        
        // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ –≤ Python
        const ws = new WebSocket(`ws://localhost:${config.wsPort}/audio/${callId}`);
        
        ws.on('open', () => {
            logger.info(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
            callData.wsConnection = ws;
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ
            streamAudioToPython(remoteStream, ws, callId);
        });
        
        ws.on('message', (data) => {
            // –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –æ—Ç Python
            handlePythonAudioResponse(data, session, callId);
        });
        
        ws.on('error', (error) => {
            logger.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}: ${error.message}`);
        });
        
        ws.on('close', () => {
            logger.info(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
        });
    }
}

/**
 * –°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –≤ Python —á–µ—Ä–µ–∑ WebSocket
 */
function streamAudioToPython(mediaStream, ws, callId) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ –∏–∑ mediaStream
    // –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ —á–µ—Ä–µ–∑ WebSocket
    // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Web Audio API –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
    
    logger.info(`üé§ –°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
    
    // –ó–∞–≥–ª—É—à–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const interval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            const audioChunk = Buffer.alloc(1024); // –ó–∞–≥–ª—É—à–∫–∞
            ws.send(audioChunk);
        } else {
            clearInterval(interval);
        }
    }, 100);
    
    activeCalls.get(callId).audioStreamInterval = interval;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Python
 */
function handlePythonAudioResponse(audioData, session, callId) {
    try {
        logger.info(`üîä –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç Python –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}: ${audioData.length} –±–∞–π—Ç`);
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–∫–µ
        // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebRTC API –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ –ø–æ—Ç–æ–∫
        
        // –ó–∞–≥–ª—É—à–∫–∞
        logger.info(`üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–∫–µ ${callId}`);
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: ${error.message}`);
    }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
 */
function cleanupCall(callId) {
    const callData = activeCalls.get(callId);
    if (!callData) return;
    
    logger.info(`üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    if (callData.timeout) {
        clearTimeout(callData.timeout);
        callData.timeout = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
    if (callData.wsConnection) {
        try {
            callData.wsConnection.close();
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: ${error.message}`);
        }
        callData.wsConnection = null;
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
    if (callData.session && !callData.session.isEnded()) {
        try {
            callData.session.terminate();
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${error.message}`);
        }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∏–Ω–≥
    if (callData.audioStreamInterval) {
        clearInterval(callData.audioStreamInterval);
        callData.audioStreamInterval = null;
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    activeCalls.delete(callId);
    
    logger.info(`‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId} (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${activeCalls.size})`);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç RingCentral
 */
async function handleWebhookEvent(eventData) {
    try {
        logger.info('üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è...');
        logger.info('üìã –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(eventData, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ telephony —Å–æ–±—ã—Ç–∏–µ
        if (eventData.event && eventData.event.includes('telephony/sessions')) {
            logger.info('üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ telephony —Å–æ–±—ã—Ç–∏–µ');
            
            const body = eventData.body;
            if (body && body.sessionId) {
                logger.info(`üìû –ù–∞–π–¥–µ–Ω sessionId: ${body.sessionId}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "Setup", "Proceeding" –∏ "Ringing"
                if (body.parties) {
                    logger.info('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ parties –≤ —Å–æ–±—ã—Ç–∏–∏:');
                    body.parties.forEach((party, index) => {
                        logger.info(`  Party ${index}: direction=${party.direction}, status=${party.status?.code}, missedCall=${party.missedCall}`);
                    });
                    
                    const inboundCall = body.parties.find(party => 
                        party.direction === 'Inbound' && 
                        party.status && 
                        ['Setup', 'Proceeding', 'Ringing'].includes(party.status.code) &&
                        !party.missedCall
                    );
                    
                    if (inboundCall) {
                        logger.info('üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!');
                        logger.info(`üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç: ${inboundCall.from?.phoneNumber || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                        logger.info(`üìû –°—Ç–∞—Ç—É—Å: ${inboundCall.status.code}`);
                        
                        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–∫–∏ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, SIP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
                        logger.info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ API...');
                        
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫
                        await forceAnswerCall(body.sessionId);
                    }
                }
            }
        } else {
            logger.info('üìã –ù–µ telephony —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        }
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å–æ–±—ã—Ç–∏—è: ${error.message}`);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
 */
function initializeWebSocketServer() {
    const app = express();
    
    // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    app.use(express.json());
    
    const server = require('http').createServer(app);
    
    wsServer = new WebSocket.Server({ server });
    
    wsServer.on('connection', (ws, req) => {
        const callId = req.url.split('/').pop();
        logger.info(`üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${callId}`);
        
        ws.on('error', (error) => {
            logger.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error.message}`);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º HTTP endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç Python —Å–µ—Ä–≤–µ—Ä–∞
    app.post('/webhook', (req, res) => {
        try {
            const eventData = req.body;
            logger.info('üìû –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ –æ—Ç Python —Å–µ—Ä–≤–µ—Ä–∞');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —Å–æ–±—ã—Ç–∏–µ
            handleWebhookEvent(eventData);
            
            res.status(200).json({ status: 'ok' });
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`);
            res.status(500).json({ error: error.message });
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ WebPhone Bridge
    app.get('/status', (req, res) => {
        try {
            const status = {
                webPhoneExists: !!webPhone,
                isRegistered: isWebPhoneRegistered,
                activeCalls: activeCalls.size,
                maxCalls: config.maxConcurrentCalls,
                deviceRegistered: !!global.registeredDeviceId,
                deviceId: global.registeredDeviceId || null,
                deviceStatus: global.deviceInfo ? global.deviceInfo.status : 'unknown',
                timestamp: new Date().toISOString()
            };
            
            res.status(200).json(status);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
            res.status(500).json({ error: error.message });
        }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    function tryListen(port, maxAttempts = 10) {
        if (maxAttempts <= 0) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫');
            throw new Error('No available ports');
        }
        
        server.listen(port, (err) => {
            if (err) {
                if (err.code === 'EADDRINUSE') {
                    logger.warn(`‚ö†Ô∏è –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º ${port + 1}...`);
                    tryListen(port + 1, maxAttempts - 1);
                } else {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
                    throw err;
                }
            } else {
                config.wsPort = port; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                logger.info(`üåê WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            }
        });
    }
    
    tryListen(config.wsPort);
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
 */
function startHealthCheck() {
    if (healthCheckTimer) {
        clearInterval(healthCheckTimer);
    }
    
    healthCheckTimer = setInterval(async () => {
        try {
            logger.debug('ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RingCentral
            if (platform && platform.loggedIn()) {
                lastHealthCheck = new Date();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é WebPhone
                const webPhoneStatus = getWebPhoneStatus();
                if (webPhone && isWebPhoneRegistered) {
                    logger.debug('‚úÖ WebPhone –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    if (webPhone && webPhone.sipClient && webPhone.sipClient.wsc && webPhone.sipClient.wsc.readyState === 1) {
                        logger.info('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
                        isWebPhoneRegistered = true;
                        
                        // –ï—Å–ª–∏ WebPhone –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                        if (!isWebPhoneRegistered) {
                            logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...');
                            setTimeout(() => {
                                forceDeviceRegistration();
                            }, 2000);
                        }
                    } else {
                        // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                        const timeSinceStart = Date.now() - (lastHealthCheck || Date.now());
                        if (timeSinceStart > 60000) { // 1 –º–∏–Ω—É—Ç–∞
                            logger.warn(`‚ö†Ô∏è WebPhone –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã (—Å—Ç–∞—Ç—É—Å: ${JSON.stringify(webPhoneStatus)}), –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
                            await attemptReconnect();
                        } else {
                            logger.debug(`‚è≥ WebPhone –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ–º... (—Å—Ç–∞—Ç—É—Å: ${JSON.stringify(webPhoneStatus)})`);
                        }
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º Python —Å–µ—Ä–≤–µ—Ä
                try {
                    const response = await axios.get(`${config.pythonServer}/health`, { timeout: 5000 });
                    if (response.status === 200) {
                        logger.debug('‚úÖ Python AI —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
                    }
                } catch (error) {
                    logger.warn(`‚ö†Ô∏è Python AI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
                }
                
            } else {
                logger.warn('‚ö†Ô∏è RingCentral —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                await attemptReconnect();
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.debug(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${activeCalls.size}/${config.maxConcurrentCalls}`);
            
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${error.message}`);
        }
    }, config.healthCheckInterval);
    
    logger.info(`ü©∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${config.healthCheckInterval}ms)`);
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ RingCentral API
 */
async function forceDeviceRegistration() {
    try {
        logger.info('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ SIP Provision API...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const body = {
            sipInfo: [
                {
                    transport: 'WSS'
                }
            ]
        };
        
        logger.info('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', JSON.stringify(body, null, 2));
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ SIP Provision API
        const response = await platform.post('/restapi/v1.0/client-info/sip-provision', body);
        const result = await response.json();
        
        logger.info('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ SIP Provision API');
        logger.info('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify(result, null, 2));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º deviceId –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (result.device && result.device.id) {
            global.registeredDeviceId = result.device.id;
            global.deviceInfo = result.device;
            logger.info(`üì± –û–±–Ω–æ–≤–ª–µ–Ω Device ID: ${global.registeredDeviceId}`);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        isWebPhoneRegistered = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º SIP –¥–∞–Ω–Ω—ã–µ –¥–ª—è WebPhone
        if (result.sipInfo && result.sipInfo[0]) {
            logger.info('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º SIP –¥–∞–Ω–Ω—ã–µ WebPhone...');
            await updateWebPhoneWithNewSipData(result.sipInfo[0]);
        }
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${error.message}`);
        if (error.response) {
            logger.error(`‚ùå HTTP Status: ${error.response.status}`);
            logger.error(`‚ùå Response: ${JSON.stringify(error.response.data, null, 2)}`);
        }
    }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–µ–º –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Call Control API
 */
async function forceAnswerCall(sessionId) {
    try {
        logger.info(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–µ–º –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Call Control API: ${sessionId}`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        const sessionResponse = await platform.get(`/restapi/v1.0/account/~/telephony/sessions/${sessionId}`);
        const sessionInfo = await sessionResponse.json();
        
        logger.info('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏:', JSON.stringify(sessionInfo, null, 2));
        
        // –ù–∞—Ö–æ–¥–∏–º party ID –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö "Setup", "Proceeding" –∏–ª–∏ "Ringing"
        const inboundParty = sessionInfo.parties.find(party => 
            party.direction === 'Inbound' && 
            party.status && 
            ['Setup', 'Proceeding', 'Ringing'].includes(party.status.code) &&
            !party.missedCall
        );
        
        if (inboundParty) {
            const partyId = inboundParty.id;
            logger.info(`üìû –ù–∞–π–¥–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫, Party ID: ${partyId}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º deviceId –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–∞
            const deviceId = global.registeredDeviceId || config.deviceId;
            const answerBody = {
                deviceId: deviceId
            };
            
            logger.info(`üì± –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceId}`);
            
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Call Control API —Å deviceId
            const answerResponse = await platform.post(
                `/restapi/v1.0/account/~/telephony/sessions/${sessionId}/parties/${partyId}/answer`,
                answerBody
            );
            const answerResult = await answerResponse.json();
            
            logger.info('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—è—Ç —á–µ—Ä–µ–∑ Call Control API');
            logger.info('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–µ–º–∞:', JSON.stringify(answerResult, null, 2));
        } else {
            logger.warn('‚ö†Ô∏è –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏');
        }
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–∞: ${error.message}`);
        if (error.response) {
            logger.error(`‚ùå HTTP Status: ${error.response.status}`);
            logger.error(`‚ùå Response: ${JSON.stringify(error.response.data, null, 2)}`);
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebPhone —Å –Ω–æ–≤—ã–º–∏ SIP –¥–∞–Ω–Ω—ã–º–∏
 */
async function updateWebPhoneWithNewSipData(newSipInfo) {
    try {
        logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebPhone —Å –Ω–æ–≤—ã–º–∏ SIP –¥–∞–Ω–Ω—ã–º–∏...');
        
        if (!webPhone || !webPhone.sipClient) {
            logger.warn('‚ö†Ô∏è WebPhone –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º SIP –¥–∞–Ω–Ω—ã–µ –≤ sipClient
        if (webPhone.sipClient.sipInfo) {
            webPhone.sipClient.sipInfo = [newSipInfo];
            logger.info('‚úÖ SIP –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ sipClient');
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º sipClient
        if (webPhone.sipClient.register) {
            await webPhone.sipClient.register();
            logger.info('‚úÖ sipClient –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        isWebPhoneRegistered = true;
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WebPhone: ${error.message}`);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ WebPhone
 */
function getWebPhoneStatus() {
    const status = {
        webPhoneExists: !!webPhone,
        isRegistered: isWebPhoneRegistered,
        userAgentExists: !!(webPhone && webPhone.userAgent),
        sipClientExists: !!(webPhone && webPhone.sipClient),
        activeCalls: activeCalls.size,
        maxCalls: config.maxConcurrentCalls,
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        deviceRegistered: !!global.registeredDeviceId,
        deviceId: global.registeredDeviceId || null,
        deviceStatus: global.deviceInfo ? global.deviceInfo.status : 'unknown',
        pollingInterval: global.devicePollingInterval || null
    };
    
    if (webPhone && webPhone.userAgent) {
        try {
            status.userAgentState = webPhone.userAgent.state || 'unknown';
            status.userAgentRegistered = webPhone.userAgent.isRegistered ? webPhone.userAgent.isRegistered() : 'method_not_available';
        } catch (error) {
            status.userAgentError = error.message;
        }
    } else if (webPhone && webPhone.sipClient) {
        try {
            status.sipClientState = webPhone.sipClient.state || 'unknown';
            status.sipClientRegistered = webPhone.sipClient.isRegistered ? webPhone.sipClient.isRegistered() : 'method_not_available';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ sipClient
            if (webPhone.sipClient.registered) {
                status.sipClientRegistered = webPhone.sipClient.registered;
            }
            if (webPhone.sipClient.connected) {
                status.sipClientConnected = webPhone.sipClient.connected;
            }
        } catch (error) {
            status.sipClientError = error.message;
        }
    } else {
        status.userAgentState = 'not_available';
        status.userAgentRegistered = 'not_available';
        status.userAgentError = 'userAgent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
    }
    
    return status;
}

/**
 * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function attemptReconnect() {
    if (reconnectAttempts >= config.reconnectAttempts) {
        logger.error(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${config.reconnectAttempts})`);
        return false;
    }
    
    reconnectAttempts++;
    logger.info(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${config.reconnectAttempts}...`);
    
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (webPhone) {
            try {
                if (webPhone.stop) {
                    await webPhone.stop();
                } else if (webPhone.userAgent && webPhone.userAgent.stop) {
                    await webPhone.userAgent.stop();
                } else if (webPhone.userAgent && webPhone.userAgent.unregister) {
                    await webPhone.userAgent.unregister();
                } else if (webPhone.sipClient && webPhone.sipClient.stop) {
                    await webPhone.sipClient.stop();
                }
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebPhone: ${error.message}`);
            }
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        await new Promise(resolve => setTimeout(resolve, config.reconnectDelay));
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RingCentral
        const rcInitialized = await initializeRingCentral();
        if (!rcInitialized) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RingCentral');
        }
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebPhone
        const wpInitialized = await initializeWebPhone();
        if (!wpInitialized) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å WebPhone');
        }
        
        reconnectAttempts = 0;
        logger.info('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        return true;
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
        return false;
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
 */
async function main() {
    logger.info('üéØ –ó–∞–ø—É—Å–∫ RingCentral WebPhone Bridge...');
    logger.info('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    logger.info(`   Client ID: ${config.clientId.substring(0, 10)}...`);
    logger.info(`   Server: ${config.server}`);
    logger.info(`   Python Server: ${config.pythonServer}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const rcInitialized = await initializeRingCentral();
    if (!rcInitialized) {
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RingCentral SDK');
        process.exit(1);
    }
    
    const wpInitialized = await initializeWebPhone();
    if (!wpInitialized) {
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebPhone');
        process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    initializeWebSocketServer();
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
    startHealthCheck();
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    startDeviceMonitoring();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    isRunning = true;
    lastHealthCheck = Date.now();
    
    logger.info('‚úÖ WebPhone Bridge —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–≤–æ–Ω–∫–∏!');
    logger.info('üéØ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤...');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('SIGINT', () => {
        logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
        shutdown().catch(error => {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: ${error.message}`);
            process.exit(1);
        });
    });
    
    process.on('SIGTERM', () => {
        logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
        shutdown().catch(error => {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: ${error.message}`);
            process.exit(1);
        });
    });
}

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
 */
async function shutdown() {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã WebPhone Bridge...');
    
    isRunning = false;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
    if (healthCheckTimer) {
        clearInterval(healthCheckTimer);
        healthCheckTimer = null;
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
    activeCalls.forEach((callData, callId) => {
        logger.info(`üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ ${callId}`);
        if (callData.session) {
            try {
                callData.session.terminate();
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ ${callId}: ${error.message}`);
            }
        }
        cleanupCall(callId);
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º WebPhone
    if (webPhone) {
        try {
            if (webPhone.stop) {
                await webPhone.stop();
            } else if (webPhone.userAgent && webPhone.userAgent.stop) {
                await webPhone.userAgent.stop();
            } else if (webPhone.userAgent && webPhone.userAgent.unregister) {
                await webPhone.userAgent.unregister();
            } else if (webPhone.sipClient && webPhone.sipClient.stop) {
                await webPhone.sipClient.stop();
            }
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebPhone: ${error.message}`);
        }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    if (wsServer) {
        wsServer.close();
    }
    
    logger.info('‚úÖ WebPhone Bridge –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main().catch(error => {
    logger.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
});