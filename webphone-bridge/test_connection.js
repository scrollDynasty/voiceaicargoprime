/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RingCentral
 */

require('dotenv').config();
const SDK = require('@ringcentral/sdk').SDK;

async function testConnection() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RingCentral...\n');
    
    const config = {
        clientId: process.env.RINGCENTRAL_CLIENT_ID,
        clientSecret: process.env.RINGCENTRAL_CLIENT_SECRET,
        jwtToken: process.env.RINGCENTRAL_JWT_TOKEN,
        server: process.env.RINGCENTRAL_SERVER || 'https://platform.ringcentral.com'
    };
    
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`   Client ID: ${config.clientId.substring(0, 10)}...`);
    console.log(`   Server: ${config.server}`);
    console.log(`   JWT Token: ${config.jwtToken ? '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`);
    
    try {
        // –°–æ–∑–¥–∞–µ–º SDK
        const rcsdk = new SDK({
            clientId: config.clientId,
            clientSecret: config.clientSecret,
            server: config.server
        });
        
        const platform = rcsdk.platform();
        
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT...');
        await platform.login({
            jwt: config.jwtToken
        });
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        console.log('üìû –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...');
        const extensionInfo = await platform.get('/restapi/v1.0/account/~/extension/~');
        const extension = await extensionInfo.json();
        
        console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
        console.log(`   –ò–º—è: ${extension.name}`);
        console.log(`   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: ${extension.extensionNumber}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${extension.status}`);
        console.log(`   –¢–∏–ø: ${extension.type}\n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');
        const tokenInfo = await platform.get('/restapi/oauth/tokeninfo');
        const token = await tokenInfo.json();
        
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ scopes:');
        const scopes = token.scope.split(' ');
        scopes.forEach(scope => {
            console.log(`   - ${scope}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è SIP –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebPhone...');
        try {
            const sipResponse = await platform.post('/restapi/v1.0/client-info/sip-provision', {
                sipInfo: [{
                    transport: 'WSS'
                }]
            });
            
            const sipData = await sipResponse.json();
            console.log('‚úÖ WebPhone –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!');
            console.log(`   SIP —Å–µ—Ä–≤–µ—Ä: ${sipData.sipInfo[0].outboundProxy}`);
            console.log(`   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${sipData.sipInfo[0].transport}\n`);
        } catch (error) {
            console.log('‚ùå WebPhone –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
            console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
        }
        
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
        console.error(`   ${error.message}`);
        
        if (error.response) {
            console.error(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.error(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`);
        }
        
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testConnection();