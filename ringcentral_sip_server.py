#!/usr/bin/env python3
"""
SIP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RingCentral
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ AI
"""

import socket
import threading
import hashlib
import time
import re
import base64
from datetime import datetime
import logging
from sip_voice_ai_engine import VoiceAIEngine
from sip_speech_processor import SpeechProcessor

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from ringcentral_config import RINGCENTRAL_CONFIG, LOCAL_CONFIG, AI_CONFIG
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª ringcentral_config.py —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!")
    print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ringcentral_config.py –∫–∞–∫ —à–∞–±–ª–æ–Ω")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RingCentralSIPServer:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not LOCAL_CONFIG.get('public_ip'):
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π IP –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            logger.info("üí° –£–∑–Ω–∞–π—Ç–µ –≤–∞—à IP –Ω–∞ https://whatismyip.com")
            exit(1)
            
        if not RINGCENTRAL_CONFIG.get('username') or not RINGCENTRAL_CONFIG.get('password'):
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã RingCentral credentials!")
            logger.info("üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ username –∏ password –≤ ringcentral_config.py")
            exit(1)
        
        self.config = RINGCENTRAL_CONFIG
        self.local_config = LOCAL_CONFIG
        self.ai_engine = VoiceAIEngine()
        self.speech_processor = SpeechProcessor()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.registered = False
        self.register_call_id = None
        self.cseq = 1
        self.active_calls = {}
        
        # SIP socket
        self.sip_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sip_socket.bind((self.local_config['local_ip'], self.local_config['sip_port']))
        
        logger.info(f"üöÄ RingCentral SIP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {self.local_config['local_ip']}:{self.local_config['sip_port']}")
        logger.info(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π IP: {self.local_config['public_ip']}")
        
    def calculate_digest_response(self, username, realm, password, method, uri, nonce):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ MD5 digest –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        ha1 = hashlib.md5(f"{username}:{realm}:{password}".encode()).hexdigest()
        ha2 = hashlib.md5(f"{method}:{uri}".encode()).hexdigest()
        response = hashlib.md5(f"{ha1}:{nonce}:{ha2}".encode()).hexdigest()
        return response
        
    def register_with_ringcentral(self, auth_header=None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ RingCentral SIP —Å–µ—Ä–≤–µ—Ä–µ"""
        from_uri = f"sip:{self.config['username']}@{self.config['domain']}"
        to_uri = from_uri
        contact_uri = f"sip:{self.config['username']}@{self.local_config['public_ip']}:{self.local_config['sip_port']}"
        
        if not self.register_call_id:
            self.register_call_id = f"{int(time.time())}{self.config['username']}@{self.local_config['public_ip']}"
        
        branch = f"z9hG4bK{int(time.time() * 1000)}"
        tag = f"{int(time.time() * 1000)}"
        
        request = f"REGISTER sip:{self.config['domain']} SIP/2.0\r\n"
        request += f"Via: SIP/2.0/UDP {self.local_config['public_ip']}:{self.local_config['sip_port']};branch={branch};rport\r\n"
        request += f"Max-Forwards: 70\r\n"
        request += f"From: <{from_uri}>;tag={tag}\r\n"
        request += f"To: <{to_uri}>\r\n"
        request += f"Call-ID: {self.register_call_id}\r\n"
        request += f"CSeq: {self.cseq} REGISTER\r\n"
        request += f"Contact: <{contact_uri}>;expires={self.config['register_interval']}\r\n"
        request += f"Expires: {self.config['register_interval']}\r\n"
        request += f"User-Agent: VoiceAI-RingCentral/1.0\r\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if auth_header:
            request += f"Authorization: {auth_header}\r\n"
            
        request += "Content-Length: 0\r\n"
        request += "\r\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            server_addr = socket.gethostbyname(self.config['domain'])
            self.sip_socket.sendto(request.encode(), (server_addr, 5060))
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω REGISTER –∑–∞–ø—Ä–æ—Å –Ω–∞ {self.config['domain']}")
            self.cseq += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ REGISTER: {e}")
            
    def handle_auth_challenge(self, message, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ 401 Unauthorized"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º WWW-Authenticate –∑–∞–≥–æ–ª–æ–≤–æ–∫
        www_auth_match = re.search(r'WWW-Authenticate: Digest (.+)', message)
        if not www_auth_match:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω WWW-Authenticate –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            return
            
        auth_params = {}
        for param in www_auth_match.group(1).split(','):
            key, value = param.strip().split('=', 1)
            auth_params[key] = value.strip('"')
            
        # –í—ã—á–∏—Å–ª—è–µ–º digest response
        username = self.config['username']
        realm = auth_params.get('realm', self.config['auth_realm'])
        nonce = auth_params['nonce']
        uri = f"sip:{self.config['domain']}"
        
        response = self.calculate_digest_response(
            username, realm, self.config['password'], 
            'REGISTER', uri, nonce
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫
        auth_header = f'Digest username="{username}", realm="{realm}", '
        auth_header += f'nonce="{nonce}", uri="{uri}", response="{response}", '
        auth_header += f'algorithm=MD5'
        
        # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º REGISTER —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        self.register_with_ringcentral(auth_header)
        
    def handle_invite(self, message, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        logger.info("üìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö!")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Call-ID
        call_id_match = re.search(r'Call-ID: (.+)', message)
        if not call_id_match:
            return
            
        call_id = call_id_match.group(1).strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º From
        from_match = re.search(r'From: .+<sip:(.+?)[@>]', message)
        caller = from_match.group(1) if from_match else "Unknown"
        
        logger.info(f"üì± –ó–≤–æ–Ω–æ–∫ –æ—Ç: {caller}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 180 Ringing
        self.send_ringing_response(message, addr)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        threading.Thread(
            target=self.accept_call,
            args=(message, addr, call_id)
        ).start()
        
    def send_ringing_response(self, invite_message, addr):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 180 Ringing"""
        # –ü–∞—Ä—Å–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∏–∑ INVITE
        via_match = re.search(r'Via: (.+)', invite_message)
        from_match = re.search(r'From: (.+)', invite_message)
        to_match = re.search(r'To: (.+)', invite_message)
        call_id_match = re.search(r'Call-ID: (.+)', invite_message)
        cseq_match = re.search(r'CSeq: (.+)', invite_message)
        
        response = "SIP/2.0 180 Ringing\r\n"
        if via_match:
            response += f"Via: {via_match.group(1)}\r\n"
        if from_match:
            response += f"From: {from_match.group(1)}\r\n"
        if to_match:
            to_header = to_match.group(1)
            if 'tag=' not in to_header:
                to_header += f";tag={int(time.time() * 1000)}"
            response += f"To: {to_header}\r\n"
        if call_id_match:
            response += f"Call-ID: {call_id_match.group(1)}\r\n"
        if cseq_match:
            response += f"CSeq: {cseq_match.group(1)}\r\n"
        response += "Content-Length: 0\r\n"
        response += "\r\n"
        
        self.sip_socket.sendto(response.encode(), addr)
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω 180 Ringing")
        
    def accept_call(self, invite_message, addr, call_id):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ –∏ –Ω–∞—á–∞–ª–æ RTP —Å–µ—Å—Å–∏–∏"""
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π RTP –ø–æ—Ä—Ç
        rtp_port = self.local_config['rtp_start_port']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        self.active_calls[call_id] = {
            'rtp_port': rtp_port,
            'remote_addr': addr,
            'start_time': datetime.now(),
            'state': 'active'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK —Å SDP
        self.send_ok_response(invite_message, addr, rtp_port)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É RTP
        threading.Thread(
            target=self.handle_rtp_stream,
            args=(call_id,)
        ).start()
        
    def send_ok_response(self, invite_message, addr, rtp_port):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 200 OK —Å SDP"""
        # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        via_match = re.search(r'Via: (.+)', invite_message)
        from_match = re.search(r'From: (.+)', invite_message)
        to_match = re.search(r'To: (.+)', invite_message)
        call_id_match = re.search(r'Call-ID: (.+)', invite_message)
        cseq_match = re.search(r'CSeq: (.+)', invite_message)
        
        # –°–æ–∑–¥–∞–µ–º SDP
        sdp = f"v=0\r\n"
        sdp += f"o=- {int(time.time())} {int(time.time())} IN IP4 {self.local_config['public_ip']}\r\n"
        sdp += f"s=VoiceAI Session\r\n"
        sdp += f"c=IN IP4 {self.local_config['public_ip']}\r\n"
        sdp += f"t=0 0\r\n"
        sdp += f"m=audio {rtp_port} RTP/AVP 0 8 101\r\n"
        sdp += f"a=rtpmap:0 PCMU/8000\r\n"
        sdp += f"a=rtpmap:8 PCMA/8000\r\n"
        sdp += f"a=rtpmap:101 telephone-event/8000\r\n"
        sdp += f"a=sendrecv\r\n"
        
        response = "SIP/2.0 200 OK\r\n"
        if via_match:
            response += f"Via: {via_match.group(1)}\r\n"
        if from_match:
            response += f"From: {from_match.group(1)}\r\n"
        if to_match:
            to_header = to_match.group(1)
            if 'tag=' not in to_header:
                to_header += f";tag={int(time.time() * 1000)}"
            response += f"To: {to_header}\r\n"
        if call_id_match:
            response += f"Call-ID: {call_id_match.group(1)}\r\n"
        if cseq_match:
            response += f"CSeq: {cseq_match.group(1)}\r\n"
        response += f"Contact: <sip:{self.config['username']}@{self.local_config['public_ip']}:{self.local_config['sip_port']}>\r\n"
        response += "Content-Type: application/sdp\r\n"
        response += f"Content-Length: {len(sdp)}\r\n"
        response += "\r\n"
        response += sdp
        
        self.sip_socket.sendto(response.encode(), addr)
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω 200 OK - –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç!")
        
    def handle_rtp_stream(self, call_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ RTP –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        if call_id not in self.active_calls:
            return
            
        rtp_port = self.active_calls[call_id]['rtp_port']
        logger.info(f"üé§ –ó–∞–ø—É—Å–∫ RTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {rtp_port}")
        
        # –°–æ–∑–¥–∞–µ–º RTP —Å–æ–∫–µ—Ç
        rtp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        rtp_socket.bind(('0.0.0.0', rtp_port))
        rtp_socket.settimeout(1.0)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        self.send_tts_response(welcome_text, rtp_socket, call_id)
        
        audio_buffer = b''
        silence_duration = 0
        
        try:
            while call_id in self.active_calls and self.active_calls[call_id]['state'] == 'active':
                try:
                    # –ü–æ–ª—É—á–∞–µ–º RTP –ø–∞–∫–µ—Ç
                    data, remote_rtp_addr = rtp_socket.recvfrom(2048)
                    
                    if len(data) > 12:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä RTP –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        # –ü–∞—Ä—Å–∏–º RTP –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        payload = data[12:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º RTP –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
                        audio_buffer += payload
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ
                        if len(audio_buffer) > 16000:  # 8kHz * 2 —Å–µ–∫
                            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                            text = self.speech_processor.process_audio(audio_buffer)
                            
                            if text:
                                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
                                ai_response = self.ai_engine.get_response(text)
                                logger.info(f"ü§ñ AI: {ai_response}")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                                self.send_tts_response(ai_response, rtp_socket, call_id)
                                
                            audio_buffer = b''
                            
                except socket.timeout:
                    silence_duration += 1
                    if silence_duration > 30:  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
                        logger.info("‚è∞ –¢–∞–π–º-–∞—É—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ RTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            
        finally:
            rtp_socket.close()
            if call_id in self.active_calls:
                del self.active_calls[call_id]
            logger.info("üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
    def send_tts_response(self, text, rtp_socket, call_id):
        """–°–∏–Ω—Ç–µ–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è TTS –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ RTP –ø–∞–∫–µ—Ç–æ–≤
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üîä –û—Ç–ø—Ä–∞–≤–∫–∞ TTS: {text}")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É RTP –ø–∞–∫–µ—Ç–æ–≤ —Å –∞—É–¥–∏–æ
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {e}")
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        self.register_with_ringcentral()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µregist—Ä–∞—Ü–∏–∏
        threading.Thread(target=self.registration_loop, daemon=True).start()
        
        logger.info("üéß –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                data, addr = self.sip_socket.recvfrom(65535)
                message = data.decode('utf-8', errors='ignore')
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {addr}:\n{message[:200]}...")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(
                    target=self.handle_sip_message, 
                    args=(message, addr)
                ).start()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
    def registration_loop(self):
        """–¶–∏–∫–ª –ø–µ—Ä–µregist—Ä–∞—Ü–∏–∏"""
        while True:
            time.sleep(self.config['register_interval'] - 30)  # –ó–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            logger.info("üîÑ –ü–µ—Ä–µregist—Ä–∞—Ü–∏—è...")
            self.register_with_ringcentral()
            
    def handle_sip_message(self, message, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö SIP —Å–æ–æ–±—â–µ–Ω–∏–π"""
        lines = message.split('\r\n')
        if not lines:
            return
            
        first_line = lines[0]
        
        if first_line.startswith('INVITE'):
            self.handle_invite(message, addr)
        elif first_line.startswith('SIP/2.0 200 OK'):
            if 'REGISTER' in message:
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ RingCentral!")
                self.registered = True
        elif first_line.startswith('SIP/2.0 401'):
            logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            self.handle_auth_challenge(message, addr)
        elif first_line.startswith('BYE'):
            logger.info("üì¥ –ü–æ–ª—É—á–µ–Ω BYE - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞")
            self.handle_bye(message, addr)
        elif first_line.startswith('ACK'):
            logger.debug("‚úì –ü–æ–ª—É—á–µ–Ω ACK")
        elif first_line.startswith('OPTIONS'):
            self.handle_options(message, addr)
            
    def handle_bye(self, message, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        call_id_match = re.search(r'Call-ID: (.+)', message)
        if call_id_match:
            call_id = call_id_match.group(1).strip()
            if call_id in self.active_calls:
                self.active_calls[call_id]['state'] = 'terminated'
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK –Ω–∞ BYE
        self.send_bye_ok(message, addr)
        
    def send_bye_ok(self, bye_message, addr):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 200 OK –Ω–∞ BYE"""
        via_match = re.search(r'Via: (.+)', bye_message)
        from_match = re.search(r'From: (.+)', bye_message)
        to_match = re.search(r'To: (.+)', bye_message)
        call_id_match = re.search(r'Call-ID: (.+)', bye_message)
        cseq_match = re.search(r'CSeq: (.+)', bye_message)
        
        response = "SIP/2.0 200 OK\r\n"
        if via_match:
            response += f"Via: {via_match.group(1)}\r\n"
        if from_match:
            response += f"From: {from_match.group(1)}\r\n"
        if to_match:
            response += f"To: {to_match.group(1)}\r\n"
        if call_id_match:
            response += f"Call-ID: {call_id_match.group(1)}\r\n"
        if cseq_match:
            response += f"CSeq: {cseq_match.group(1)}\r\n"
        response += "Content-Length: 0\r\n"
        response += "\r\n"
        
        self.sip_socket.sendto(response.encode(), addr)
        
    def handle_options(self, message, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ (keep-alive)"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK
        via_match = re.search(r'Via: (.+)', message)
        from_match = re.search(r'From: (.+)', message)
        to_match = re.search(r'To: (.+)', message)
        call_id_match = re.search(r'Call-ID: (.+)', message)
        cseq_match = re.search(r'CSeq: (.+)', message)
        
        response = "SIP/2.0 200 OK\r\n"
        if via_match:
            response += f"Via: {via_match.group(1)}\r\n"
        if from_match:
            response += f"From: {from_match.group(1)}\r\n"
        if to_match:
            response += f"To: {to_match.group(1)}\r\n"
        if call_id_match:
            response += f"Call-ID: {call_id_match.group(1)}\r\n"
        if cseq_match:
            response += f"CSeq: {cseq_match.group(1)}\r\n"
        response += "Accept: application/sdp\r\n"
        response += "Content-Length: 0\r\n"
        response += "\r\n"
        
        self.sip_socket.sendto(response.encode(), addr)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ RingCentral Voice AI...")
    print("=" * 50)
    
    try:
        server = RingCentralSIPServer()
        server.run()
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()