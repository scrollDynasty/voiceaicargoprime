"""
Webhook Server –¥–ª—è RingCentral –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç telephony/sessions —Å–æ–±—ã—Ç–∏—è –æ—Ç RingCentral
"""

import logging
import json
import asyncio
import hmac
import hashlib
import base64
import os
import time
import requests
from datetime import datetime
from typing import Dict, Any, Optional
from flask import Flask, request, jsonify, Response, make_response
from flask_cors import CORS
import threading
from functools import wraps

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º AI –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebPhone
# from voice_ai_engine import voice_ai_engine
# from speech_processor import async_synthesize
from config import Config
from ringcentral_auth import make_request
# from audio_stream_handler import audio_stream_handler  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è AI –º–æ–¥—É–ª–µ–π
class MockVoiceAIEngine:
    def __init__(self):
        pass
    
    def handle_call(self, *args, **kwargs):
        logger.info("üß™ MOCK: VoiceAI engine –∑–∞–≥–ª—É—à–∫–∞")
        return None
    
    async def handle_incoming_call(self, call_data):
        """Mock implementation of handle_incoming_call for testing"""
        logger.info("üß™ MOCK: Handling incoming call with VoiceAI engine –∑–∞–≥–ª—É—à–∫–∞")
        logger.info(f"üß™ MOCK: Call data: {call_data}")
        
        # Simulate processing the call
        call_id = call_data.get("callId", "unknown")
        phone_number = call_data.get("from", {}).get("phoneNumber", "unknown")
        
        logger.info(f"üß™ MOCK: Processing call {call_id} from {phone_number}")
        
        # Return a mock successful response
        return {
            "status": "success",
            "message": "Call handled by mock AI engine",
            "call_id": call_id,
            "actions": ["answered", "processing"]
        }
    
    def health_check(self):
        return {"status": "healthy", "message": "Mock AI engine is running"}

voice_ai_engine = MockVoiceAIEngine()

def async_synthesize(*args, **kwargs):
    logger.info("üß™ MOCK: Speech synthesis –∑–∞–≥–ª—É—à–∫–∞")
    return None

class MockAudioStreamHandler:
    def __init__(self):
        pass

audio_stream_handler = MockAudioStreamHandler()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOGGING["level"]),
    format=Config.LOGGING["format"],
    handlers=[
        logging.FileHandler(Config.LOGGING["file"]),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Flask
app.logger.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request
def log_request_info():
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    logger.debug('=' * 80)
    logger.debug(f'Request: {request.method} {request.url}')
    logger.debug(f'Headers: {dict(request.headers)}')
    logger.debug(f'Content-Type: {request.content_type}')
    logger.debug(f'Content-Length: {request.content_length}')
    if request.method in ['POST', 'PUT', 'PATCH']:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_data(as_text=True)
        if data:
            logger.debug(f'Body (first 1000 chars): {data[:1000]}')
        else:
            logger.debug('Body: <empty>')
    logger.debug('=' * 80)

@app.after_request
def log_response_info(response):
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ"""
    logger.debug(f'Response: {response.status}')
    return response

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_calls = {}
call_lock = threading.Lock()
subscription_id = None
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–∫–∏
answered_calls = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∑–≤–æ–Ω–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å
answer_lock = threading.Lock()

def get_current_device_id():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Device ID –∏–∑ WebPhone Bridge"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Device ID –∏–∑ WebPhone Bridge
        import requests
        webphone_response = requests.get('http://localhost:8081/status', timeout=2)
        if webphone_response.status_code == 200:
            webphone_status = webphone_response.json()
            device_id = webphone_status.get('deviceId')
            if device_id:
                logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω Device ID –∏–∑ WebPhone Bridge: {device_id}")
                return device_id
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Device ID –∏–∑ WebPhone Bridge: {e}")
    
    # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–≥–æ–≤ WebPhone Bridge
    try:
        import subprocess
        result = subprocess.run(['grep', '-o', 'Device ID: [0-9]*', 'webphone-bridge/webphone-bridge.log'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0 and result.stdout:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Device ID –∏–∑ –ª–æ–≥–æ–≤
            lines = result.stdout.strip().split('\n')
            if lines:
                last_line = lines[-1]
                device_id = last_line.split(': ')[-1]
                logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω Device ID –∏–∑ –ª–æ–≥–æ–≤: {device_id}")
                return device_id
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Device ID –∏–∑ –ª–æ–≥–æ–≤: {e}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å None
    fallback_device_id = os.getenv('RINGCENTRAL_DEVICE_ID')
    if fallback_device_id:
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º Device ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {fallback_device_id}")
        return fallback_device_id
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Device ID –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return None

def get_device_id_from_webhook_event(webhook_data):
    """–ü–æ–ª—É—á–∏—Ç—å Device ID –∏–∑ webhook —Å–æ–±—ã—Ç–∏—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Device ID –∏–∑ –ø–æ–ª—è to.deviceId –≤ webhook —Å–æ–±—ã—Ç–∏–∏
        body = webhook_data.get('body', {})
        parties = body.get('parties', [])
        
        for party in parties:
            if party.get('direction') == 'Inbound':
                to_info = party.get('to', {})
                device_id = to_info.get('deviceId')
                if device_id:
                    logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω Device ID –∏–∑ webhook —Å–æ–±—ã—Ç–∏—è: {device_id}")
                    return device_id
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Device ID –∏–∑ webhook —Å–æ–±—ã—Ç–∏—è: {e}")
    
    return None

def send_webhook_to_js_server(event_data: Dict[str, Any]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook —Å–æ–±—ã—Ç–∏–µ –≤ JavaScript —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        js_server_url = "http://localhost:8081/webhook"
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è –≤ JS —Å–µ—Ä–≤–µ—Ä: {js_server_url}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {json.dumps(event_data, indent=2)}")
        
        response = requests.post(
            js_server_url,
            json=event_data,
            headers={'Content-Type': 'application/json'},
            timeout=5
        )
        
        if response.status_code == 200:
            logger.info("‚úÖ Webhook —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ JS —Å–µ—Ä–≤–µ—Ä")
        else:
            logger.warning(f"‚ö†Ô∏è JS —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
            
    except requests.exceptions.ConnectionError:
        logger.warning("‚ö†Ô∏è JS —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ConnectionError)")
    except requests.exceptions.Timeout:
        logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ JS —Å–µ—Ä–≤–µ—Ä")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –≤ JS —Å–µ—Ä–≤–µ—Ä: {e}")

def disable_auto_json_parsing(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    Flask –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç JSON –∫–æ–≥–¥–∞ Content-Type: application/json
    –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_json
        original_get_json = request.get_json
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º get_json —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª None
        request.get_json = lambda *args, **kwargs: None
        
        try:
            result = f(*args, **kwargs)
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            request.get_json = original_get_json
        
        return result
    return decorated_function

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "ringcentral_connected": subscription_id is not None,
            "subscription_active": subscription_id is not None,
            "active_calls": len(active_calls),
            "voice_ai_status": voice_ai_engine.health_check()
        }
        return jsonify(health_data), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({"status": "unhealthy", "error": str(e)}), 500

@app.route('/webhook/validate', methods=['POST'])
def webhook_validate():
    """Endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook –æ—Ç RingCentral"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook")
    return jsonify({"status": "ok"}), 200

@app.route('/webhook/test', methods=['POST'])
def webhook_test():
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π POST –∑–∞–ø—Ä–æ—Å")
    return jsonify({"status": "ok", "message": "Webhook is working"}), 200

@app.route('/test/webhook', methods=['POST'])
def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook —Å–æ–±—ã—Ç–∏–π"""
    try:
        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô WEBHOOK - –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        logger.info(f"üß™ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        raw_data = request.get_data()
        logger.info(f"üß™ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data[:500]}")
        
        if raw_data:
            try:
                webhook_data = json.loads(raw_data.decode('utf-8'))
                logger.info(f"üß™ JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(webhook_data, indent=2)}")
            except json.JSONDecodeError as e:
                logger.error(f"üß™ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        
        return jsonify({"status": "test_received", "message": "Test webhook working"}), 200
        
    except Exception as e:
        logger.error(f"üß™ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook', methods=['GET', 'POST'])
@disable_auto_json_parsing
def ringcentral_webhook():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç RingCentral
    
    GET –∑–∞–ø—Ä–æ—Å—ã:
    - hub.challenge: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç challenge –∫–∞–∫ plain text)
    - caller, name, called: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç External App
    
    POST –∑–∞–ø—Ä–æ—Å—ã:
    - –ü—É—Å—Ç–æ–π POST: –í–∞–ª–∏–¥–∞—Ü–∏—è webhook (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Validation-Token)
    - JSON –¥–∞–Ω–Ω—ã–µ: –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π
    """
    logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω {request.method} –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'GET':
        logger.info(f"üîç GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.args)}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º hub.challenge –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook URL
        challenge = request.args.get('hub.challenge')
        if challenge:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω validation challenge: {challenge}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º challenge –∫–∞–∫ plain text (–Ω–µ JSON!)
            response = Response(challenge, content_type='text/plain')
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {challenge}")
            return response
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç External App
        caller = request.args.get('caller')
        name = request.args.get('name')
        called = request.args.get('called')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ)
        has_call_params = 'caller' in request.args or 'name' in request.args or 'called' in request.args
        
        if has_call_params:
            logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ External App")
            logger.info(f"   –ó–≤–æ–Ω—è—â–∏–π: {caller or 'Unknown'}")
            logger.info(f"   –ò–º—è: {name or 'Unknown'}")
            logger.info(f"   –í—ã–∑—ã–≤–∞–µ–º—ã–π –Ω–æ–º–µ—Ä: {called or 'Unknown'}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫
            call_data = {
                'caller': caller or 'Unknown',
                'name': name or 'Unknown',
                'called': called or 'Unknown',
                'source': 'external_app'
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=process_call, args=(call_data,)).start()
            
            return jsonify({
                "status": "call_received",
                "message": "Call processing started",
                "caller": caller or 'Unknown',
                "name": name or 'Unknown',
                "called": called or 'Unknown'
            }), 200
        
        # 3. –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.warning("‚ùå GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        logger.warning(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.args)}")
        return jsonify({
            "error": "Missing required parameters",
            "expected": ["hub.challenge", "caller", "name", "called"],
            "received": dict(request.args)
        }), 400
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤
    elif request.method == 'POST':
        logger.info(f"üì® POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_data = request.get_data()
        logger.debug(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(raw_data)} –±–∞–π—Ç")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook
        if not raw_data:
            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Validation-Token –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            validation_token = request.headers.get('Validation-Token')
            if validation_token:
                logger.info(f"üîë –í–æ–∑–≤—Ä–∞—â–∞–µ–º Validation-Token: {validation_token}")
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Validation-Token
                response = make_response(jsonify({"status": "ok"}), 200)
                response.headers['Validation-Token'] = validation_token
                response.headers['Content-Type'] = 'application/json'
                return response
            else:
                logger.info("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π OK –æ—Ç–≤–µ—Ç")
                return jsonify({"status": "ok"}), 200
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–¥–µ–ª–∞–µ–º –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON)
        if not _verify_webhook_signature(request):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({"error": "Invalid signature"}), 401
        
        # 3. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            webhook_data = json.loads(raw_data.decode('utf-8'))
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ: {json.dumps(webhook_data, indent=2)}")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(f"üìÑ Raw data: {raw_data[:500]}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            return jsonify({"error": "Invalid JSON"}), 400
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è
        event_type = webhook_data.get('eventType', 'unknown')
        uuid = webhook_data.get('uuid', 'unknown')
        logger.info(f"üîç –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}, UUID: {uuid}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º body –∏–∑ webhook payload
        body = webhook_data.get('body', {})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ webhook —Å–æ–±—ã—Ç–∏—è –≤ JavaScript —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        send_webhook_to_js_server(webhook_data)
        
        # –Ø–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è telephony-session-event
        if event_type == 'telephony-session-event':
            logger.info("üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ telephony-session-event")
            return _handle_telephony_session(body, webhook_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telephonySessionId –¥–ª—è telephony —Å–æ–±—ã—Ç–∏–π (fallback)
        if body.get('telephonySessionId'):
            logger.info(f"üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º telephony —Å–æ–±—ã—Ç–∏–µ")
            return _handle_telephony_session(body, webhook_data)
        else:
            logger.info(f"üìã –ù–µ telephony —Å–æ–±—ã—Ç–∏–µ: {webhook_data.get('uuid', 'unknown')}")
            return jsonify({"status": "received"}), 200
    
    # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
    else:
        logger.warning(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {request.method}")
        return jsonify({"error": "Method not allowed"}), 405

def _verify_webhook_signature(request) -> bool:
    """
    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç RingCentral
    
    RingCentral –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫: X-RC-Signature
    - –ê–ª–≥–æ—Ä–∏—Ç–º: HMAC-SHA1
    - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: Base64
    
    Args:
        request: Flask request –æ–±—ä–µ–∫—Ç
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ RingCentral
    signature = request.headers.get('X-RC-Signature')
    if not signature:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        logger.debug("–ü–æ–¥–ø–∏—Å—å webhook –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        return True
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    webhook_secret = Config.RINGCENTRAL.get('webhook_secret')
    if not webhook_secret:
        logger.debug("Webhook secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
        return True
    
    try:
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è HMAC –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è RingCentral
        body = request.get_data()
        expected = base64.b64encode(
            hmac.new(
                webhook_secret.encode('utf-8'), 
                body, 
                hashlib.sha1
            ).digest()
        ).decode()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        is_valid = hmac.compare_digest(signature, expected)
        
        if is_valid:
            logger.debug("–ü–æ–¥–ø–∏—Å—å webhook –≤–∞–ª–∏–¥–Ω–∞")
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected[:10]}..., –ø–æ–ª—É—á–µ–Ω–æ: {signature[:10]}...")
            
        return is_valid
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

def _handle_telephony_session(session_data: Dict[str, Any], webhook_data: Dict[str, Any] = None) -> Response:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ telephony/sessions —Å–æ–±—ã—Ç–∏–π
    
    Args:
        session_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ body
        webhook_data: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook —Å–æ–±—ã—Ç–∏—è
        
    Returns:
        Response: Flask –æ—Ç–≤–µ—Ç
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        telephony_session_id = session_data.get('telephonySessionId')
        parties = session_data.get('parties', [])
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ telephony session: {telephony_session_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        for party in parties:
            direction = party.get('direction')
            status = party.get('status', {})
            party_id = party.get('id')
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º party: direction={direction}, status={status}, party_id={party_id}")
            
            # ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "Setup" –∏–ª–∏ "Proceeding" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–æ–∫
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä
            target_number = "+15139283626"  # –ù–æ–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            to_data = party.get('to', {})
            incoming_number = to_data.get('phoneNumber', '')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if direction == 'Inbound':
                logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä: {incoming_number}, —Å—Ç–∞—Ç—É—Å: {status.get('code')}")
            
            if direction == 'Inbound' and status.get('code') == 'Setup' and target_number in incoming_number:
                logger.info(f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')}: session={telephony_session_id}, party={party_id}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º deviceId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                to_data = party.get('to', {})
                device_id = to_data.get('deviceId')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deviceId –ø–æ–ª—É—á–µ–Ω
                if not device_id:
                    logger.error(f"‚ùå Device ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ webhook —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞: session={telephony_session_id}, party={party_id}")
                    logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {to_data}")
                    return jsonify({"status": "error", "message": "Device ID not found"}), 400
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
                call_data = {
                    "callId": f"{telephony_session_id}_{party_id}",
                    "telephonySessionId": telephony_session_id,
                    "partyId": party_id,
                    "from": party.get('from', {}),
                    "to": to_data,
                    "direction": direction,
                    "status": status,
                    "deviceId": device_id,  # –î–æ–±–∞–≤–ª—è–µ–º deviceId
                    "timestamp": datetime.now().isoformat(),
                    "source": "webhook"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                }
                
                logger.info(f"üìû –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
                logger.info(f"   Session ID: {telephony_session_id}")
                logger.info(f"   Party ID: {party_id}")
                logger.info(f"   Device ID: {device_id}")
                logger.info(f"   –û—Ç: {party.get('from', {}).get('phoneNumber', 'Unknown')}")
                logger.info(f"   –ö: {to_data.get('phoneNumber', 'Unknown')}")
                logger.info(f"   –°—Ç–∞—Ç—É—Å: {status.get('code')}")
                logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
                with call_lock:
                    active_calls[call_data["callId"]] = call_data
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ VoiceAIEngine
                thread = threading.Thread(target=_run_engine_for_call, args=(call_data,))
                thread.daemon = True
                thread.start()
                logger.info(f"üìã –ó–∞–ø—É—â–µ–Ω VoiceAIEngine –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_data['callId']}")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Call Control API
                # –î–æ–±–∞–≤–ª—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ –≤ call_data
                call_data['webhook_data'] = webhook_data
                answer_thread = threading.Thread(target=_run_answer_call, args=(call_data,))
                answer_thread.daemon = True
                answer_thread.start()
                logger.info(f"üìû –ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_data['callId']}")
                
            elif direction == 'Inbound' and status.get('code') in ['Proceeding', 'Setup', 'Alerting']:
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏  
                logger.info(f"üì± –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')} (–æ–∂–∏–¥–∞–µ–º Ringing): session={telephony_session_id}, party={party_id}")
                
            elif direction == 'Inbound' and status.get('code') in ['Answered', 'Connected']:
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω
                logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')}: session={telephony_session_id}, party={party_id}")
                
            elif direction == 'Inbound' and status.get('code') in ['Disconnected', 'Gone', 'Cancelled']:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
                logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')}: session={telephony_session_id}, party={party_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞—è –ø–æ—á—Ç–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä
                target_number = "15139283626"  # –ù–æ–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                to_data = party.get('to', {})
                incoming_number = to_data.get('phoneNumber', '')
                
                if status.get('reason') == 'Voicemail' and party.get('missedCall') and target_number in incoming_number:
                    logger.info(f"üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞—è –ø–æ—á—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ —Ç—Ä—É–±–∫–∏...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º deviceId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    to_data = party.get('to', {})
                    device_id = to_data.get('deviceId')
                    
                    if device_id:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ —Ç—Ä—É–±–∫–∏ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã
                        voicemail_data = {
                            "callId": f"{telephony_session_id}_{party_id}_voicemail",
                            "telephonySessionId": telephony_session_id,
                            "partyId": party_id,
                            "from": party.get('from', {}),
                            "to": to_data,
                            "direction": direction,
                            "status": status,
                            "deviceId": device_id,
                            "timestamp": datetime.now().isoformat(),
                            "source": "voicemail",
                            "webhook_data": webhook_data
                        }
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                        voicemail_thread = threading.Thread(target=_handle_voicemail_and_answer, args=(voicemail_data,))
                        voicemail_thread.daemon = True
                        voicemail_thread.start()
                        logger.info(f"üìû –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã –¥–ª—è {voicemail_data['callId']}")
                    else:
                        logger.error(f"‚ùå Device ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
                call_id = f"{telephony_session_id}_{party_id}"
                with call_lock:
                    if call_id in active_calls:
                        del active_calls[call_id]
                        logger.info(f"üóëÔ∏è –ó–≤–æ–Ω–æ–∫ {call_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
                with answer_lock:
                    answered_calls.discard(call_id)
                    logger.info(f"üóëÔ∏è –ó–≤–æ–Ω–æ–∫ {call_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö")
            else:
                if direction == 'Inbound':
                    to_data = party.get('to', {})
                    incoming_number = to_data.get('phoneNumber', 'Unknown')
                    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä {incoming_number} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status.get('code')} (–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞)")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
                if party_id:
                    call_id = f"{telephony_session_id}_{party_id}"
                    with call_lock:
                        if call_id in active_calls:
                            active_calls[call_id]["status"] = status
                            active_calls[call_id]["last_update"] = datetime.now().isoformat()
                            
                            # –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                            if status.get('code') in ['Disconnected', 'Gone']:
                                logger.info(f"–ó–≤–æ–Ω–æ–∫ {call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                                del active_calls[call_id]
        
        return jsonify({"status": "processed"}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ telephony session: {e}")
        return jsonify({"error": str(e)}), 500

async def _answer_and_process_call(call_data: Dict[str, Any]):
    """
    –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –∏ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    Args:
        call_data: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ
    """
    try:
        telephony_session_id = call_data['telephonySessionId']
        party_id = call_data['partyId']
        call_id = call_data['callId']
        
        logger.info(f"üìû –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}")
        logger.info(f"üîó Session: {telephony_session_id}, Party: {party_id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Device ID
        try:
            logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å deviceId
            device_id = call_data.get('deviceId')
            request_body = {}
            if device_id:
                request_body["deviceId"] = device_id
                logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º deviceId: {device_id}")
            
            answer_response = make_request(
                'POST',
                f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/answer',
                request_body if request_body else None
            )
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}")
            logger.info(f"üìã –û—Ç–≤–µ—Ç API: {answer_response}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Voice AI
        await asyncio.sleep(1)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ Voice AI Engine –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Voice AI –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        try:
            response = await voice_ai_engine.handle_incoming_call(call_data)
            logger.info(f"‚úÖ Voice AI –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–≤–æ–Ω–æ–∫ {call_id}: {response}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Voice AI –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def _run_engine_for_call(call_data: Dict[str, Any]):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞ –≤ VoiceAIEngine –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        logger.info(f"ü§ñ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ VoiceAIEngine: callId={call_data.get('callId')}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            normalized = dict(call_data)
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏ –¥–ª—è engine
            if 'sessionId' not in normalized and 'telephonySessionId' in normalized:
                normalized['sessionId'] = normalized['telephonySessionId']
            loop.run_until_complete(voice_ai_engine.handle_incoming_call(normalized))
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VoiceAIEngine: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def _run_answer_call(call_data: Dict[str, Any]):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        logger.info(f"üìû –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: callId={call_data.get('callId')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        call_status = call_data.get('status', {}).get('code')
        if call_status in ['Disconnected', 'Gone', 'Cancelled']:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ: {call_status}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        session_id = call_data.get('telephonySessionId') or call_data.get('sessionId')
        party_id = call_data.get('partyId')
        device_id = call_data.get('deviceId')
        
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫:")
        logger.info(f"   Session ID: {session_id}")
        logger.info(f"   Party ID: {party_id}")
        logger.info(f"   Device ID: {device_id}")
        
        if not session_id or not party_id:
            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: session_id={session_id}, party_id={party_id}")
            return
            
        if not device_id:
            logger.error(f"‚ùå Device ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: device_id={device_id}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω—è—â–µ–º
        caller_info = {
            'from': call_data.get('from', ''),
            'to': call_data.get('to', ''),
            'direction': call_data.get('direction', 'Inbound')
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        success = answer_call_automatically(session_id, party_id, caller_info, device_id)
        
        if success:
            logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: callId={call_data.get('callId')}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫: callId={call_data.get('callId')}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def _handle_voicemail_and_answer(voicemail_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ—á—Ç—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–Ω—è—Ç—å —Ç—Ä—É–±–∫—É."""
    try:
        logger.info(f"üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã: callId={voicemail_data.get('callId')}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤–∞—è –ø–æ—á—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        import time
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã (3 —Å–µ–∫—É–Ω–¥—ã)...")
        time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        caller_number = voicemail_data.get('from', {}).get('phoneNumber')
        device_id = voicemail_data.get('deviceId')
        
        if not caller_number or not device_id:
            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: caller={caller_number}, device={device_id}")
            return
        
        logger.info(f"üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ {caller_number}...")
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API
        success = initiate_outbound_call(caller_number, device_id)
        
        if success:
            logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ {caller_number}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ {caller_number}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ—á—Ç—ã: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def initiate_outbound_call(phone_number: str, device_id: str) -> bool:
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API."""
    
    # üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    methods_to_try = [
        ("call_out", "Call-Out API (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç Security scope)"),
        ("ringout", "RingOut API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)"),  
        ("webphone_notify", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ WebPhone –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞")
    ]
    
    for method, description in methods_to_try:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {description}")
            
            if method == "call_out":
                # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Call-Out API –≤–º–µ—Å—Ç–æ Call Control API
                # –≠—Ç–æ—Ç endpoint –Ω–µ —Ç—Ä–µ–±—É–µ—Ç Security scope
                call_data = {
                    "from": {
                        "phoneNumber": Config.RINGCENTRAL['main_number']  # –û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫
                    },
                    "to": {
                        "phoneNumber": phone_number
                    }
                }
                
                logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è Call-Out: {call_data}")
                
                # –ü—Ä–æ–±—É–µ–º Call-Out API endpoint
                response = make_request(
                    'POST',
                    '/restapi/v1.0/account/~/extension/~/call-out',
                    call_data
                )
                
                logger.info(f"‚úÖ Call-Out –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω! Response: {response}")
                return True
                
            elif method == "ringout":
                # RingOut API –º–µ—Ç–æ–¥
                logger.info(f"üìû –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ {phone_number} —Å device {device_id}")
                
                ringout_data = {
                    "from": {
                        "phoneNumber": Config.RINGCENTRAL['main_number']
                    },
                    "to": {
                        "phoneNumber": phone_number  
                    },
                    "callerId": {
                        "phoneNumber": Config.RINGCENTRAL['main_number']
                    },
                    "playPrompt": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–ø—Ç
                    "country": {
                        "id": "1"  # –°–®–ê
                    }
                }
                
                logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è RingOut: {ringout_data}")
                
                ringout_response = make_request(
                    'POST',
                    '/restapi/v1.0/account/~/extension/~/ringout',
                    ringout_data
                )
                
                logger.info(f"‚úÖ RingOut –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω! Response: {ringout_response}")
                return True
                
            elif method == "webphone_notify":
                # üîî –£–≤–µ–¥–æ–º–ª—è–µ–º WebPhone –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                logger.info(f"üîî –£–≤–µ–¥–æ–º–ª—è–µ–º WebPhone –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞ –Ω–∞ {phone_number}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É WebPhone –º–æ—Å—Ç—É
                try:
                    import requests
                    webphone_data = {
                        "action": "make_call",
                        "to": phone_number,
                        "from": device_id
                    }
                    
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ WebPhone –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8081
                    webphone_response = requests.post(
                        'http://localhost:8081/make-call',
                        json=webphone_data,
                        timeout=5
                    )
                    
                    if webphone_response.status_code == 200:
                        logger.info(f"‚úÖ WebPhone —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞ –Ω–∞ {phone_number}")
                        return True
                    else:
                        logger.warn(f"‚ö†Ô∏è WebPhone –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º {webphone_response.status_code}")
                        
                except Exception as webphone_error:
                    logger.warn(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å WebPhone: {webphone_error}")
                
                # Fallback - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞  
                logger.info(f"üìù –ó–ê–ú–ï–¢–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ {phone_number}")
                logger.info(f"üì± –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id}")
                logger.info(f"üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ó–≤–æ–Ω–æ–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ RingCentral")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                
        except Exception as method_error:
            logger.warn(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ {description} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(method_error)}")
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    logger.error(f"‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
    logger.info(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è RingCentral")
    logger.info(f"üí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –°–æ–≤–µ—Ä—à–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ –≤—Ä—É—á–Ω—É—é –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}")
    
    return False

@app.route('/calls', methods=['GET'])
def get_active_calls():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        with call_lock:
            calls_list = list(active_calls.values())
        return jsonify({
            "total": len(calls_list),
            "calls": calls_list
        }), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/call/<call_id>/transfer', methods=['POST'])
def transfer_call(call_id: str):
    """
    –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω–æ–∫ –Ω–∞ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä
    
    Body:
        {
            "transferTo": "+1234567890",
            "transferType": "blind" // –∏–ª–∏ "attended"
        }
    """
    try:
        data = request.get_json()
        transfer_to = data.get('transferTo')
        transfer_type = data.get('transferType', 'blind')
        
        if not transfer_to:
            return jsonify({"error": "transferTo is required"}), 400
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫
        with call_lock:
            call_data = active_calls.get(call_id)
        
        if not call_data:
            return jsonify({"error": "Call not found"}), 404
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API
        try:
            transfer_data = {
                "phoneNumber": transfer_to,
                "transferType": transfer_type
            }
            
            make_request(
                'POST',
                f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{call_data["telephonySessionId"]}/parties/{call_data["partyId"]}/transfer',
                transfer_data
            )
            
            return jsonify({"status": "transferred"}), 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            return jsonify({"error": "Transfer failed"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–æ–Ω–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/call/<call_id>/hangup', methods=['DELETE'])
def hangup_call(call_id: str):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫
        with call_lock:
            call_data = active_calls.get(call_id)
        
        if not call_data:
            return jsonify({"error": "Call not found"}), 404
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API
        try:
            make_request(
                'DELETE',
                f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{call_data["telephonySessionId"]}/parties/{call_data["partyId"]}'
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            with call_lock:
                if call_id in active_calls:
                    del active_calls[call_id]
            return jsonify({"status": "hangup"}), 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
            return jsonify({"error": "Hangup failed"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/subscription/create', methods=['POST'])
def create_subscription():
    """–°–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        async def do_create_subscription():
            return await _create_webhook_subscription()
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        subscription_info = loop.run_until_complete(do_create_subscription())
        loop.close()
        
        if subscription_info:
            global subscription_id
            subscription_id = subscription_info['id']
            return jsonify(subscription_info), 200
        else:
            return jsonify({"error": "Failed to create subscription"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return jsonify({"error": str(e)}), 500

async def _cleanup_old_subscriptions():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ç–æ—Ç –∂–µ webhook URL"""
    try:
        from ringcentral_auth import make_request
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        response = make_request('GET', '/restapi/v1.0/subscription')
        if not response:
            return
        
        subscriptions = response.get('records', [])
        target_url = Config.RINGCENTRAL['webhook_url']
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ—Ç –∂–µ URL
        old_subscriptions = []
        for sub in subscriptions:
            sub_url = sub.get('deliveryMode', {}).get('address')
            if sub_url == target_url:
                old_subscriptions.append(sub)
        
        if len(old_subscriptions) > 1:
            logger.info(f"üßπ –ù–∞–π–¥–µ–Ω–æ {len(old_subscriptions)} —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, —É–¥–∞–ª—è–µ–º...")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            old_subscriptions.sort(key=lambda x: x.get('creationTime', ''), reverse=True)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–∞–º–æ–π –Ω–æ–≤–æ–π
            for sub in old_subscriptions[1:]:
                sub_id = sub.get('id')
                logger.info(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É: {sub_id}")
                try:
                    make_request('DELETE', f'/restapi/v1.0/subscription/{sub_id}')
                    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {sub_id} —É–¥–∞–ª–µ–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É {sub_id}: {e}")
        elif len(old_subscriptions) == 1:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º")
        else:
            logger.info("üìã –°—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def _create_webhook_subscription():
    """–°–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è telephony/sessions —Å–æ–±—ã—Ç–∏–π"""
    try:
        from ringcentral_auth import make_request
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await _cleanup_old_subscriptions()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        response = make_request('GET', '/restapi/v1.0/subscription')
        if response:
            subscriptions = response.get('records', [])
            target_url = Config.RINGCENTRAL['webhook_url']
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ—Ç –∂–µ URL
            for sub in subscriptions:
                sub_url = sub.get('deliveryMode', {}).get('address')
                if sub_url == target_url and sub.get('status') == 'Active':
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {sub.get('id')}")
                    return sub
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é webhook –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {Config.RINGCENTRAL['webhook_url']}")
        
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RingCentral
        # Wildcard —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π
        event_filters = [
            '/restapi/v1.0/account/~/extension/~/telephony/sessions',
            '/restapi/v1.0/account/~/extension/~/presence'
        ]
        
        # ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ delivery_mode –¥–ª—è RingCentral
        delivery_mode = {
            'transportType': 'WebHook',
            'address': Config.RINGCENTRAL['webhook_url'],
            'encryption': False  # –ò–ª–∏ True —Å encryptionKey –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —à–∏—Ñ—Ä–∞—Ü–∏—è
        }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_data = {
            'eventFilters': event_filters,
            'deliveryMode': delivery_mode,
            'expiresIn': 86400  # 24 —á–∞—Å–∞
        }
        
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {json.dumps(subscription_data, indent=2)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        subscription_info = make_request('POST', '/restapi/v1.0/subscription', subscription_data)
        
        logger.info(f"Webhook –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {subscription_info['id']}")
        return subscription_info
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return None

async def initialize_ringcentral():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    global subscription_id
    
    try:
        logger.info("üöÄ Starting Voice AI System...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from ringcentral_auth import authenticate, get_auth_status
        if authenticate():
            status = get_auth_status()
            logger.info(f"üìû RingCentral –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {status['auth_method']}")
            logger.info("‚úÖ RingCentral connection test passed")
        else:
            logger.warning("‚ö†Ô∏è RingCentral connection test failed")
        
        # –°–æ–∑–¥–∞–µ–º webhook –ø–æ–¥–ø–∏—Å–∫—É
        subscription_info = await _create_webhook_subscription()
        if subscription_info:
            subscription_id = subscription_info['id']
            logger.info(f"Webhook –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {subscription_id}")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É")
            
    except Exception as e:
        logger.error(f"üí• Application startup failed: {e}")
        raise

@app.route('/api/handle-webphone-call', methods=['POST'])
def handle_webphone_call():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç WebPhone Bridge
    
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∑–≤–æ–Ω–∫–µ –æ—Ç JavaScript WebPhone
    –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫—É
    """
    try:
        logger.info("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç WebPhone Bridge")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
        call_data = request.get_json()
        if not call_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({"error": "No call data provided"}), 400
        
        logger.info(f"üìû –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç WebPhone:")
        logger.info(f"   Call ID: {call_data.get('callId')}")
        logger.info(f"   From: {call_data.get('from')}")
        logger.info(f"   To: {call_data.get('to')}")
        logger.info(f"   Session ID: {call_data.get('sessionId')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ audio stream handler
        import asyncio
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        response = loop.run_until_complete(audio_stream_handler.handle_webphone_call(call_data))
        
        logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {response.get('status')}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebPhone –∑–≤–æ–Ω–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            "error": str(e),
            "status": "error"
        }), 500

@app.route('/api/webphone/status', methods=['GET'])
def webphone_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WebPhone –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        active_calls = audio_stream_handler.get_active_calls()
        
        return jsonify({
            "status": "operational",
            "websocket_running": audio_stream_handler.is_running,
            "active_calls": len(active_calls),
            "calls": active_calls
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({"error": str(e)}), 500

def start_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {Config.WEBHOOK['host']}:{Config.WEBHOOK['port']}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RingCentral –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def init_ringcentral():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(initialize_ringcentral())
            loop.close()
        
        init_thread = threading.Thread(target=init_ringcentral)
        init_thread.daemon = True
        init_thread.start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Voice AI engine
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Voice AI engine...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        def start_audio_ws_server():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(audio_stream_handler.start_websocket_server(8080))
            loop.run_forever()
        
        ws_thread = threading.Thread(target=start_audio_ws_server)
        ws_thread.daemon = True
        ws_thread.start()
        logger.info("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.run(
            host=Config.WEBHOOK["host"],
            port=Config.WEBHOOK["port"],
            debug=Config.WEBHOOK["debug"],
            threaded=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"Internal server error: {error}")
    return jsonify({"error": "Internal server error"}), 500

@app.route('/call', methods=['POST'])
def handle_incoming_call():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é"""
    try:
        logger.info("üìû –ü–æ–ª—É—á–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
        call_data = request.get_json()
        if not call_data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–µ")
            return jsonify({"error": "No call data"}), 400
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: {json.dumps(call_data, indent=2)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        from_number = call_data.get('from', {}).get('phoneNumber', 'Unknown')
        to_number = call_data.get('to', {}).get('phoneNumber', 'Unknown')
        
        logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç {from_number} –Ω–∞ {to_number}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=process_call, args=(call_data,))
        thread.daemon = True
        thread.start()
        
        return jsonify({
            "status": "received",
            "message": "Call processed",
            "from": from_number,
            "to": to_number
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

def answer_call_automatically(session_id: str, party_id: str, caller_info: Dict[str, Any], device_id: str = None) -> bool:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral Call Control API
    
    Args:
        session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
        caller_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω—è—â–µ–º
        device_id: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
        
    Returns:
        bool: True –µ—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç
    """
    try:
        call_id = f"{session_id}_{party_id}"
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫: session={session_id}, party={party_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫
        with answer_lock:
            if call_id in answered_calls:
                logger.info(f"‚ö†Ô∏è –ù–∞ –∑–≤–æ–Ω–æ–∫ {call_id} —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            answered_calls.add(call_id)
            logger.info(f"üîí –ó–≤–æ–Ω–æ–∫ {call_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
        try:
            session_info = make_request('GET', f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{session_id}')
            logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º: {session_info}")
            
            # –ò—â–µ–º –Ω—É–∂–Ω—É—é party –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
            parties = session_info.get('parties', [])
            target_party = None
            for party in parties:
                if party.get('id') == party_id:
                    target_party = party
                    break
            
            if not target_party:
                logger.error(f"‚ùå Party {party_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_id}")
                return False
            
            party_status = target_party.get('status', {}).get('code')
            party_reason = target_party.get('status', {}).get('reason')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
            valid_statuses = ['Setup', 'Proceeding', 'Alerting']
            invalid_statuses = ['Disconnected', 'Gone', 'Cancelled', 'Answered', 'Connected']
            
            if party_status in invalid_statuses:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ: {party_status}")
                if party_reason:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {party_reason}")
                return False
            elif party_status not in valid_statuses:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {party_status}")
                return False
                
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {party_status}")
            
        except Exception as check_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å: {check_error}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å deviceId
        request_body = {}
        if device_id:
            request_body["deviceId"] = device_id
            logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º deviceId –∏–∑ webhook —Å–æ–±—ã—Ç–∏—è: {device_id}")
        else:
            logger.error("‚ùå deviceId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        try:
            from ringcentral_auth import get_auth_status
            auth_status = get_auth_status()
            logger.info(f"üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_status}")
        except Exception as auth_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_error}")
            logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        logger.info(f"   Session ID: {session_id}")
        logger.info(f"   Party ID: {party_id}")
        logger.info(f"   Device ID: {device_id}")
        logger.info(f"   Caller Info: {caller_info}")
        
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.ringcentral.com/api-reference/Call-Control/answerCall
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç: POST /restapi/v1.0/account/~/extension/~/telephony/sessions/{session_id}/parties/{party_id}/answer")
        logger.info(f"üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {request_body}")
        
        response = make_request(
            'POST',
            f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{session_id}/parties/{party_id}/answer',
            request_body if request_body else None
        )
        
        logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! Response: {response}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        with answer_lock:
            answered_calls.discard(call_id)
            logger.info(f"üóëÔ∏è –ó–≤–æ–Ω–æ–∫ {call_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        
        return False

def play_audio_to_call(session_id: str, party_id: str, audio_data: bytes) -> bool:
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ audio –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –∑–≤–æ–Ω–∫–µ —á–µ—Ä–µ–∑ RingCentral Call Control API
    
    Args:
        session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ
    """
    try:
        logger.info(f"üîä –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–∫–µ: session={session_id}, party={party_id}")
        
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.ringcentral.com/api-reference/Call-Control/playAudio
        # RingCentral –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ base64 encoded audio data
        
        import base64
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ base64
        audio_base64 = base64.b64encode(audio_data).decode('utf-8')
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–∫–µ
        play_data = {
            'audioData': audio_base64,
            'playMode': 'play'
        }
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ: {len(audio_base64)} —Å–∏–º–≤–æ–ª–æ–≤ base64")
        play_response = make_request(
            'POST',
            f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{session_id}/parties/{party_id}/play',
            play_data
        )
        
        logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –≤ –∑–≤–æ–Ω–∫–µ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

def start_ai_conversation(call_data: Dict[str, Any]):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å AI —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∑–≤–æ–Ω—è—â–∏–º
    
    Args:
        call_data: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ
    """
    try:
        session_id = call_data['telephonySessionId']
        party_id = call_data['partyId']
        caller_number = call_data.get('from', {}).get('phoneNumber', 'Unknown')
        
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å {caller_number}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting_text = "Hi there! Welcome to Prime Cargo Logistics! I'm your AI assistant, and I'm here to help you with tracking shipments, scheduling pickups, or any other logistics needs. How can I assist you today?"
        
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Ç–æ–∫–µ
        def generate_and_play_audio():
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –∞—É–¥–∏–æ
                    audio_data = loop.run_until_complete(async_synthesize(greeting_text))
                    logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"recordings/greeting_{caller_number}_{timestamp}.wav"
                    os.makedirs("recordings", exist_ok=True)
                    with open(filename, "wb") as f:
                        f.write(audio_data)
                    logger.info(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
                    
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–∫–µ
                    if play_audio_to_call(session_id, party_id, audio_data):
                        logger.info("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                        
                        # TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:
                        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ audio stream –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        # 2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)
                        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ LLM
                        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (TTS)
                        # 5. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                        
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
                        
                finally:
                    loop.close()
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_and_play_audio: {str(e)}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        thread = threading.Thread(target=generate_and_play_audio)
        thread.daemon = True
        thread.start()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def process_call(call_data: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    Args:
        call_data: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç webhook –∏–ª–∏ External App)
    """
    try:
        logger.info(f"üìû –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞: {call_data}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤–æ–Ω–∫–∞
        source = call_data.get('source', 'webhook')
        
        if source == 'external_app':
            # –ó–≤–æ–Ω–æ–∫ –æ—Ç External App (GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
            caller = call_data.get('caller', 'Unknown')
            name = call_data.get('name', 'Unknown')
            called = call_data.get('called', 'Unknown')
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç External App:")
            logger.info(f"   –ó–≤–æ–Ω—è—â–∏–π: {caller}")
            logger.info(f"   –ò–º—è: {name}")
            logger.info(f"   –í—ã–∑—ã–≤–∞–µ–º—ã–π –Ω–æ–º–µ—Ä: {called}")
            
            # –î–ª—è External App –∑–≤–æ–Ω–∫–æ–≤ –º—ã –Ω–µ –º–æ–∂–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å
            # —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç telephony session ID
            logger.info("‚ö†Ô∏è External App –∑–≤–æ–Ω–æ–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            greeting = f"Hi {name}! Welcome to Prime Cargo Logistics! I'm here to help you with anything you need today! How can I assist you?"
            
            # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è External App
            def generate_external_audio():
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        audio_file = loop.run_until_complete(async_synthesize(greeting))
                        logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(audio_file)} –±–∞–π—Ç –∞—É–¥–∏–æ")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        filename = f"recordings/external_call_{timestamp}.wav"
                        os.makedirs("recordings", exist_ok=True)
                        with open(filename, "wb") as f:
                            f.write(audio_file)
                        logger.info(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
                        
                    finally:
                        loop.close()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è External App: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            thread = threading.Thread(target=generate_external_audio)
            thread.daemon = True
            thread.start()
            
        else:
            # –ó–≤–æ–Ω–æ–∫ –æ—Ç webhook (–µ—Å—Ç—å telephony session ID)
            telephony_session_id = call_data.get('telephonySessionId')
            party_id = call_data.get('partyId')
            caller_info = call_data.get('from', {})
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç webhook:")
            logger.info(f"   Session ID: {telephony_session_id}")
            logger.info(f"   Party ID: {party_id}")
            logger.info(f"   –û—Ç: {caller_info.get('phoneNumber', 'Unknown')}")
            
            # 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
            if telephony_session_id and party_id:
                device_id = call_data.get('deviceId')
                if answer_call_automatically(telephony_session_id, party_id, caller_info, device_id):
                    logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º AI —Ä–∞–∑–≥–æ–≤–æ—Ä...")
                    
                    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º AI —Ä–∞–∑–≥–æ–≤–æ—Ä
                    start_ai_conversation(call_data)
                    return
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫")
            else:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç telephonySessionId –∏–ª–∏ partyId")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

if __name__ == '__main__':
    start_server()