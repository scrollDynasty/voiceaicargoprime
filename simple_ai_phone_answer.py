#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è AI –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ RingCentral
–ò—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ REST API
"""

import os
import asyncio
import aiohttp
import logging
from flask import Flask, request, jsonify
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RingCentral
RINGCENTRAL_CLIENT_ID = os.getenv('RINGCENTRAL_CLIENT_ID')
RINGCENTRAL_CLIENT_SECRET = os.getenv('RINGCENTRAL_CLIENT_SECRET')
RINGCENTRAL_JWT_TOKEN = os.getenv('RINGCENTRAL_JWT_TOKEN')
RINGCENTRAL_SERVER = 'https://platform.ringcentral.com'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
access_token = None

async def get_access_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ JWT"""
    global access_token
    
    async with aiohttp.ClientSession() as session:
        data = {
            'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer',
            'assertion': RINGCENTRAL_JWT_TOKEN
        }
        
        async with session.post(
            f'{RINGCENTRAL_SERVER}/restapi/oauth/token',
            data=data,
            auth=aiohttp.BasicAuth(RINGCENTRAL_CLIENT_ID, RINGCENTRAL_CLIENT_SECRET)
        ) as response:
            result = await response.json()
            access_token = result['access_token']
            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ RingCentral")
            return access_token

async def answer_incoming_call(telephony_session_id, party_id):
    """
    –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Call Control API
    """
    if not access_token:
        await get_access_token()
    
    async with aiohttp.ClientSession() as session:
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫
        url = f'{RINGCENTRAL_SERVER}/restapi/v1.0/account/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/answer'
        
        async with session.post(url, headers=headers) as response:
            if response.status == 200:
                logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç: session={telephony_session_id}, party={party_id}")
                return True
            else:
                error = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {error}")
                return False

async def play_ai_message(telephony_session_id, party_id, message):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–≤–æ–Ω–∫–µ
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Text-to-Speech –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ
    """
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π TTS RingCentral
    async with aiohttp.ClientSession() as session:
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        # –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f'{RINGCENTRAL_SERVER}/restapi/v1.0/account/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/play'
        
        data = {
            'text': message,
            'voiceId': 'Joanna',  # –ì–æ–ª–æ—Å –¥–ª—è TTS
            'languageId': 'en-US'
        }
        
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                logger.info(f"‚úÖ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {message}")
            else:
                error = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}")

async def transfer_to_voicemail(telephony_session_id, party_id):
    """
    –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω–æ–∫ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ—á—Ç—É –µ—Å–ª–∏ AI –Ω–µ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å
    """
    async with aiohttp.ClientSession() as session:
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        url = f'{RINGCENTRAL_SERVER}/restapi/v1.0/account/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/transfer'
        
        data = {
            'voicemail': True
        }
        
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ—á—Ç—É")

@app.route('/webhook', methods=['POST'])
def handle_webhook():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç RingCentral
    """
    try:
        data = request.json
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if data.get('event') == '/restapi/v1.0/account/~/telephony/sessions':
            body = data.get('body', {})
            telephony_session_id = body.get('telephonySessionId')
            parties = body.get('parties', [])
            
            # –ò—â–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
            for party in parties:
                if party.get('direction') == 'Inbound' and party.get('status', {}).get('code') == 'Setup':
                    party_id = party.get('id')
                    from_number = party.get('from', {}).get('phoneNumber', 'Unknown')
                    
                    logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç {from_number}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    asyncio.create_task(handle_incoming_call(telephony_session_id, party_id, from_number))
                    
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

async def handle_incoming_call(telephony_session_id, party_id, from_number):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ AI —Å–∏—Å—Ç–µ–º–æ–π
    """
    try:
        # 1. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
        answered = await answer_incoming_call(telephony_session_id, party_id)
        if not answered:
            return
        
        # 2. –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1)
        
        # 3. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∑–≤–æ–Ω—è—â–µ–≥–æ
        greeting = f"Hello! This is AI assistant from Prime Cargo Logistics. How can I help you today?"
        await play_ai_message(telephony_session_id, party_id, greeting)
        
        # 4. –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞:
        # - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–≤–æ–Ω—è—â–µ–≥–æ
        # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI
        # - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:
        await asyncio.sleep(3)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        
        # 5. AI –æ—Ç–≤–µ—á–∞–µ—Ç
        ai_response = "I understand you're calling about shipment tracking. Let me check that for you."
        await play_ai_message(telephony_session_id, party_id, ai_response)
        
        # 6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        await asyncio.sleep(2)
        closing = "Is there anything else I can help you with today?"
        await play_ai_message(telephony_session_id, party_id, closing)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞: {e}")

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'service': 'AI Phone Answer System',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(get_access_token())
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=8000, debug=True)