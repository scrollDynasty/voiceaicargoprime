#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ RingCentral
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç JWT –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
"""

import os
import time
import requests
import logging
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

class RingCentralAuth:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ RingCentral"""
    
    def __init__(self):
        self.client_id = os.getenv('RINGCENTRAL_CLIENT_ID')
        self.client_secret = os.getenv('RINGCENTRAL_CLIENT_SECRET')
        self.server_url = os.getenv('RINGCENTRAL_SERVER', 'https://platform.ringcentral.com')
        
        # –¢–æ–∫–µ–Ω—ã
        self.access_token = None
        self.refresh_token = None
        self.token_expires_at = None
        
        # JWT —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
        self.jwt_token = os.getenv('RINGCENTRAL_JWT_TOKEN')
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.is_authenticated = False
        self.auth_method = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._validate_config()
    
    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not self.client_id or not self.client_secret:
            raise Exception("RINGCENTRAL_CLIENT_ID –∏ RINGCENTRAL_CLIENT_SECRET –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        logger.info("üîê RingCentral Auth initialized")
        logger.info(f"üåê Server: {self.server_url}")
        logger.info(f"üîë Client ID: {self.client_id[:10]}...")
    
    def authenticate(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å fallback"""
        try:
            # –ü—Ä–æ–±—É–µ–º JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if self.jwt_token and self._try_jwt_auth():
                self.auth_method = "jwt"
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT —É—Å–ø–µ—à–Ω–∞")
                return True
            
            # Fallback –Ω–∞ OAuth —Å refresh token
            if self._try_refresh_token():
                self.auth_method = "refresh_token"
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ refresh token —É—Å–ø–µ—à–Ω–∞")
                return True
            
            logger.error("‚ùå JWT –∏ refresh token –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _try_jwt_auth(self):
        """–ü—Ä–æ–±—É–µ–º JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            logger.info("üîë –ü—Ä–æ–±—É–µ–º JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
            if not self._is_jwt_valid():
                logger.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
                return False
            
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô JWT FLOW —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
            # 1. –û–±–º–µ–Ω–∏–≤–∞–µ–º JWT –Ω–∞ access token —á–µ—Ä–µ–∑ OAuth endpoint
            
            import base64
            
            # –°–æ–∑–¥–∞–µ–º Basic Auth header
            credentials = f"{self.client_id}:{self.client_secret}"
            encoded_credentials = base64.b64encode(credentials.encode()).decode()
            
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': f'Basic {encoded_credentials}'
            }
            
            data = {
                'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                'assertion': self.jwt_token
            }
            
            logger.info("üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º JWT –Ω–∞ access token...")
            response = requests.post(
                f"{self.server_url}/restapi/oauth/token",
                headers=headers,
                data=data
            )
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data['access_token']
                self.refresh_token = token_data.get('refresh_token')
                self.token_expires_at = time.time() + token_data['expires_in']
                self.is_authenticated = True
                
                logger.info("‚úÖ JWT –æ–±–º–µ–Ω –Ω–∞ access token —É—Å–ø–µ—à–µ–Ω")
                logger.info(f"üìã Scope: {token_data.get('scope', 'Unknown')}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ JWT: {response.status_code}")
                logger.error(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _is_jwt_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            import base64
            import json
            
            parts = self.jwt_token.split('.')
            if len(parts) != 3:
                return False
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
            payload = parts[1]
            padding = 4 - len(payload) % 4
            if padding != 4:
                payload += '=' * padding
            
            decoded = base64.urlsafe_b64decode(payload)
            payload_data = json.loads(decoded.decode('utf-8'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            exp_timestamp = payload_data.get('exp')
            if not exp_timestamp:
                return False
            
            current_time = int(time.time())
            return exp_timestamp > current_time
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT: {e}")
            return False
    
    def _try_refresh_token(self):
        """–ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh_token"""
        try:
            refresh_token = os.getenv('RINGCENTRAL_REFRESH_TOKEN')
            if not refresh_token:
                logger.info("üìù Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...")
            
            data = {
                'grant_type': 'refresh_token',
                'refresh_token': refresh_token,
                'client_id': self.client_id,
                'client_secret': self.client_secret
            }
            
            response = requests.post(f"{self.server_url}/restapi/oauth/token", data=data)
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data['access_token']
                self.refresh_token = token_data.get('refresh_token', refresh_token)
                self.token_expires_at = time.time() + token_data['expires_in']
                self.is_authenticated = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π refresh token
                self._save_refresh_token(self.refresh_token)
                
                logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    

    
    def _save_refresh_token(self, refresh_token):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –≤ .env —Ñ–∞–π–ª"""
        try:
            env_file = '.env'
            if os.path.exists(env_file):
                with open(env_file, 'r') as f:
                    lines = f.readlines()
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å RINGCENTRAL_REFRESH_TOKEN
                found = False
                for i, line in enumerate(lines):
                    if line.startswith('RINGCENTRAL_REFRESH_TOKEN='):
                        lines[i] = f'RINGCENTRAL_REFRESH_TOKEN={refresh_token}\n'
                        found = True
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º
                if not found:
                    lines.append(f'RINGCENTRAL_REFRESH_TOKEN={refresh_token}\n')
                
                with open(env_file, 'w') as f:
                    f.writelines(lines)
                
                logger.info("üíæ Refresh token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å refresh token: {e}")
    
    def make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        if not self.is_authenticated:
            if not self.authenticate():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        if self.token_expires_at and time.time() > self.token_expires_at - 300:  # 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            logger.info("üîÑ –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            if not self._try_refresh_token():
                if not self.authenticate():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
        
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json'
        }
        
        url = f"{self.server_url}{endpoint}"
        
        logger.info(f"üåê {method} {endpoint}")
        
        try:
            if method.upper() == 'GET':
                response = requests.get(url, headers=headers)
            elif method.upper() == 'POST':
                response = requests.post(url, headers=headers, json=data)
            elif method.upper() == 'PUT':
                response = requests.put(url, headers=headers, json=data)
            elif method.upper() == 'DELETE':
                response = requests.delete(url, headers=headers)
            else:
                raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            
            return response.json() if response.content else None
            
        except requests.exceptions.HTTPError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            if e.response is not None:
                logger.error(f"–û—Ç–≤–µ—Ç: {e.response.text}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    def get_auth_status(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return {
            'is_authenticated': self.is_authenticated,
            'auth_method': self.auth_method,
            'server_url': self.server_url,
            'client_id': self.client_id[:10] + '...' if self.client_id else None,
            'token_expires_at': self.token_expires_at,
            'has_jwt': bool(self.jwt_token),
            'has_refresh_token': bool(self.refresh_token)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_auth_instance = None

def get_auth():
    """–ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    global _auth_instance
    if _auth_instance is None:
        _auth_instance = RingCentralAuth()
    return _auth_instance

def authenticate():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    auth = get_auth()
    return auth.authenticate()

def make_request(method, endpoint, data=None):
    """–í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
    auth = get_auth()
    return auth.make_request(method, endpoint, data)

def get_auth_status():
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    auth = get_auth()
    return auth.get_auth_status()
