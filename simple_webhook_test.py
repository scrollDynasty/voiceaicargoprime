#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–æ–≤
"""

import json
import logging
from datetime import datetime
from flask import Flask, request, jsonify, Response
import requests
import os
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('webhook_test.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ make_request –∏–∑ ringcentral_auth
def make_request(method: str, endpoint: str, data: Dict = None):
    """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ RingCentral API"""
    logger.info(f"üîÑ –ò–º–∏—Ç–∞—Ü–∏—è {method} –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}")
    logger.info(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2) if data else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {"status": "simulated_success", "data": data}

def answer_call_automatically(session_id: str, party_id: str, caller_info: Dict[str, Any], device_id: str = None) -> bool:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral Call Control API
    """
    try:
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫: session={session_id}, party={party_id}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å deviceId
        request_body = {}
        if device_id:
            request_body["deviceId"] = device_id
            logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º deviceId: {device_id}")
        else:
            logger.warning("‚ö†Ô∏è deviceId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ")
        
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
        response = make_request(
            'POST',
            f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{session_id}/parties/{party_id}/answer',
            request_body if request_body else None
        )
        
        logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! Response: {response}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

@app.route('/webhook', methods=['POST', 'GET'])
def handle_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç RingCentral"""
    try:
        logger.info("üìû –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        webhook_data = request.get_json()
        if not webhook_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ webhook –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({"error": "No data"}), 400
        
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ: {json.dumps(webhook_data, indent=2)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ telephony —Å–æ–±—ã—Ç–∏—è
        event_type = webhook_data.get('event', '')
        if '/telephony/sessions' in event_type:
            logger.info("üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ telephony —Å–æ–±—ã—Ç–∏–µ")
            return process_telephony_event(webhook_data.get('body', {}))
        else:
            logger.info(f"üìã –ù–µ telephony —Å–æ–±—ã—Ç–∏–µ: {webhook_data.get('uuid', 'unknown')}")
            return jsonify({"status": "ignored"}), 200
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({"error": str(e)}), 500

def process_telephony_event(session_data: Dict) -> Response:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ telephony/sessions —Å–æ–±—ã—Ç–∏–π
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        telephony_session_id = session_data.get('telephonySessionId')
        parties = session_data.get('parties', [])
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ telephony session: {telephony_session_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        for party in parties:
            direction = party.get('direction')
            status = party.get('status', {})
            party_id = party.get('id')
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º party: direction={direction}, status={status}, party_id={party_id}")
            
            # ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö "Ringing" –∏–ª–∏ "Proceeding" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if direction == 'Inbound' and status.get('code') in ['Ringing', 'Proceeding']:
                logger.info(f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')}: session={telephony_session_id}, party={party_id}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º deviceId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                to_data = party.get('to', {})
                device_id = to_data.get('deviceId')
                
                logger.info(f"üìû –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
                logger.info(f"   Session ID: {telephony_session_id}")
                logger.info(f"   Party ID: {party_id}")
                logger.info(f"   Device ID: {device_id}")
                logger.info(f"   –û—Ç: {party.get('from', {}).get('phoneNumber', 'Unknown')}")
                logger.info(f"   –ö: {to_data.get('phoneNumber', 'Unknown')}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫
                caller_info = party.get('from', {})
                if answer_call_automatically(telephony_session_id, party_id, caller_info, device_id):
                    logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç!")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫")
                
            elif direction == 'Inbound' and status.get('code') in ['Proceeding', 'Setup', 'Alerting']:
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                logger.info(f"üì± –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')} (–æ–∂–∏–¥–∞–µ–º Ringing –∏–ª–∏ Proceeding): session={telephony_session_id}, party={party_id}")
                
            elif direction == 'Inbound' and status.get('code') in ['Answered', 'Connected']:
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω
                logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')}: session={telephony_session_id}, party={party_id}")
                
            elif direction == 'Inbound' and status.get('code') in ['Disconnected', 'Gone', 'Cancelled']:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
                logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {status.get('code')}: session={telephony_session_id}, party={party_id}")
        
        return jsonify({"status": "processed"}), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ telephony —Å–æ–±—ã—Ç–∏—è: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()}), 200

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ webhook —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info("üìã –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    app.run(host='0.0.0.0', port=5000, debug=True)