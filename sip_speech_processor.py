"""
Speech Processor –¥–ª—è SIP/RTP —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç –∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
"""

import logging
import whisper
import numpy as np
from TTS.api import TTS
import io
import wave
import struct

logger = logging.getLogger(__name__)

class SpeechProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—á–∏ –¥–ª—è SIP —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        logger.info("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
        self.whisper_model = whisper.load_model("base")
        logger.info("‚úÖ Whisper –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å
        logger.info("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ TTS –º–æ–¥–µ–ª–∏...")
        self.tts = TTS(model_name="tts_models/en/ljspeech/tacotron2-DDC")
        logger.info("‚úÖ TTS –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
    def audio_to_text(self, audio_data: bytes, sample_rate: int = 8000) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        
        Args:
            audio_data: –°—ã—Ä—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (8kHz –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏)
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ numpy array
            audio_array = np.frombuffer(audio_data, dtype=np.int16)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—É–¥–∏–æ
            audio_float = audio_array.astype(np.float32) / 32768.0
            
            # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ 16kHz (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Whisper), –¥–µ–ª–∞–µ–º —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥
            if sample_rate != 16000:
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å librosa)
                audio_float = np.interp(
                    np.linspace(0, len(audio_float), int(len(audio_float) * 16000 / sample_rate)),
                    np.arange(len(audio_float)),
                    audio_float
                )
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            result = self.whisper_model.transcribe(audio_float, language="ru")
            text = result["text"].strip()
            
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return ""
            
    def text_to_audio(self, text: str, sample_rate: int = 8000) -> bytes:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
            
        Returns:
            –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
            with io.BytesIO() as wav_buffer:
                # TTS –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç wav —Ñ–∞–π–ª
                self.tts.tts_to_file(
                    text=text,
                    file_path=None,
                    speaker=None,
                    language="en"
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ TTS
                # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                duration = len(text) * 0.1  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                samples = int(duration * sample_rate)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏—à–∏–Ω—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ—á—å)
                audio_data = b'\x00' * (samples * 2)  # 16-bit samples
                
            logger.info(f"üîä –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ—á—å –¥–ª—è: {text[:50]}...")
            return audio_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return b''
            
    def convert_audio_format(self, audio_data: bytes, from_rate: int, to_rate: int) -> bytes:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        
        Args:
            audio_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            from_rate: –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
            to_rate: –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞
            
        Returns:
            –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        """
        if from_rate == to_rate:
            return audio_data
            
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
            audio_array = np.frombuffer(audio_data, dtype=np.int16)
            
            # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥
            resampled_length = int(len(audio_array) * to_rate / from_rate)
            resampled = np.interp(
                np.linspace(0, len(audio_array), resampled_length),
                np.arange(len(audio_array)),
                audio_array
            )
            
            # –û–±—Ä–∞—Ç–Ω–æ –≤ bytes
            return resampled.astype(np.int16).tobytes()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return audio_data