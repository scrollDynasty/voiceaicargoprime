#!/usr/bin/env python3
"""
SIP/RTP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è RingCentral —Å real-time –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–≤–æ–Ω–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç pjsua2 –¥–ª—è –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å SIP –∏ RTP –ø–æ—Ç–æ–∫–∞–º–∏
"""

import os
import sys
import time
import logging
import threading
import queue
import numpy as np
from typing import Optional, Dict, Any, Callable
import pjsua2 as pj

from config import Config
from speech_processor import speech_processor
from llm_handler import llm_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AudioProcessor(pj.AudioMediaPort):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    –ü–æ–ª—É—á–∞–µ—Ç RTP –ø–∞–∫–µ—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ AI —Å–∏—Å—Ç–µ–º—É
    """
    
    def __init__(self, call_handler):
        pj.AudioMediaPort.__init__(self)
        self.call_handler = call_handler
        self.createPort("audio_processor", 16000)
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞—É–¥–∏–æ
        self.incoming_buffer = bytearray()
        self.outgoing_queue = queue.Queue()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.chunk_size = 16000  # 1 —Å–µ–∫—É–Ω–¥–∞ –∞—É–¥–∏–æ –ø—Ä–∏ 16kHz
        self.processing = False
        
    def onFrameRequested(self, frame):
        """
        Callback –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ (–æ—Ç AI –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É)
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ SIP —Å—Ç–µ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ AI –æ—Ç–≤–µ—Ç–æ–≤
            if not self.outgoing_queue.empty():
                audio_data = self.outgoing_queue.get_nowait()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç pjsua
                if len(audio_data) >= frame.size * 2:
                    frame.buf = audio_data[:frame.size * 2]
                else:
                    # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                    frame.buf = audio_data + b'\x00' * (frame.size * 2 - len(audio_data))
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É
                frame.buf = b'\x00' * frame.size * 2
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ onFrameRequested: {e}")
            frame.buf = b'\x00' * frame.size * 2
    
    def onFrameReceived(self, frame):
        """
        Callback –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ (–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∫ AI)
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω RTP –ø–∞–∫–µ—Ç —Å –∞—É–¥–∏–æ
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
            self.incoming_buffer.extend(frame.buf)
            
            # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if len(self.incoming_buffer) >= self.chunk_size * 2 and not self.processing:
                self.processing = True
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                audio_chunk = bytes(self.incoming_buffer[:self.chunk_size * 2])
                self.incoming_buffer = self.incoming_buffer[self.chunk_size * 2:]
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(
                    target=self._process_audio_chunk,
                    args=(audio_chunk,),
                    daemon=True
                ).start()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ onFrameReceived: {e}")
    
    def _process_audio_chunk(self, audio_data: bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ AI"""
        try:
            # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ numpy array (16-bit PCM)
            audio_array = np.frombuffer(audio_data, dtype=np.int16)
            
            # 2. –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å (STT)
            text = speech_processor.transcribe_audio(audio_array)
            
            if text and text.strip():
                logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                
                # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
                ai_response = llm_handler.get_response(text)
                logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {ai_response}")
                
                # 4. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å (TTS)
                response_audio = speech_processor.synthesize_speech(ai_response)
                
                # 5. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if response_audio is not None:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    audio_bytes = response_audio.astype(np.int16).tobytes()
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
                    chunk_size = 320  # 20ms –ø—Ä–∏ 16kHz
                    for i in range(0, len(audio_bytes), chunk_size):
                        chunk = audio_bytes[i:i + chunk_size]
                        self.outgoing_queue.put(chunk)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        finally:
            self.processing = False
    
    def send_audio(self, audio_data: bytes):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤ –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫"""
        self.outgoing_queue.put(audio_data)


class AICallHandler(pj.Call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SIP –∑–≤–æ–Ω–∫–æ–≤ —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    """
    
    def __init__(self, account, call_id=pj.PJSUA_INVALID_ID):
        pj.Call.__init__(self, account, call_id)
        self.audio_processor = None
        self.call_info = None
        
    def onCallState(self, prm):
        """Callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        ci = self.getInfo()
        self.call_info = ci
        
        logger.info(f"üìû –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–∞: {ci.stateText} ({ci.state})")
        
        if ci.state == pj.PJSIP_INV_STATE_CONFIRMED:
            # –ó–≤–æ–Ω–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫—É
            self._setup_audio_processing()
            
        elif ci.state == pj.PJSIP_INV_STATE_DISCONNECTED:
            # –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {ci.lastReason}")
            
    def onCallMediaState(self, prm):
        """Callback –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        ci = self.getInfo()
        
        for mi in ci.media:
            if mi.type == pj.PJMEDIA_TYPE_AUDIO and mi.status == pj.PJSUA_CALL_MEDIA_ACTIVE:
                # –ê—É–¥–∏–æ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω
                logger.info("üîä –ê—É–¥–∏–æ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –º–µ–¥–∏–∞
                audio_media = self.getAudioMedia(mi.index)
                
                if self.audio_processor:
                    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫ –∑–≤–æ–Ω–∫—É
                    audio_media.startTransmit(self.audio_processor)
                    self.audio_processor.startTransmit(audio_media)
                    
                    logger.info("‚úÖ AI –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∑–≤–æ–Ω–∫—É")
    
    def _setup_audio_processing(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            self.audio_processor = AudioProcessor(self)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            greeting = self._generate_greeting()
            greeting_audio = speech_processor.synthesize_speech(greeting)
            
            if greeting_audio is not None:
                audio_bytes = greeting_audio.astype(np.int16).tobytes()
                self.audio_processor.send_audio(audio_bytes)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def _generate_greeting(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        caller_number = self.call_info.remoteUri if self.call_info else "Unknown"
        
        return (
            "Hello! Thank you for calling Prime Cargo Logistics. "
            "I'm your AI assistant. How can I help you today?"
        )


class SIPServer:
    """
    SIP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ RingCentral
    """
    
    def __init__(self):
        self.ep = None
        self.account = None
        self.transport = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SIP
        self.sip_config = {
            'domain': 'sip.ringcentral.com',
            'username': Config.RINGCENTRAL.get('sip_username', ''),
            'password': Config.RINGCENTRAL.get('sip_password', ''),
            'port': 5060,
            'transport': 'UDP'
        }
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ SIP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º endpoint
            self.ep = pj.Endpoint()
            self.ep.libCreate()
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è endpoint
            ep_cfg = pj.EpConfig()
            ep_cfg.logConfig.level = 3
            ep_cfg.logConfig.consoleLevel = 3
            
            self.ep.libInit(ep_cfg)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if self.sip_config['transport'] == 'UDP':
                self.transport = self.ep.transportCreate(
                    pj.PJSIP_TRANSPORT_UDP,
                    pj.TransportConfig()
                )
            else:
                tls_cfg = pj.TransportConfig()
                tls_cfg.port = 5061
                self.transport = self.ep.transportCreate(
                    pj.PJSIP_TRANSPORT_TLS,
                    tls_cfg
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º endpoint
            self.ep.libStart()
            logger.info("‚úÖ SIP Endpoint –∑–∞–ø—É—â–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º SIP –∞–∫–∫–∞—É–Ω—Ç
            self._create_account()
            
            logger.info(f"‚úÖ SIP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.sip_config['port']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SIP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    def _create_account(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ SIP –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è RingCentral"""
        try:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            acc_cfg = pj.AccountConfig()
            
            # SIP URI
            acc_cfg.idUri = f"sip:{self.sip_config['username']}@{self.sip_config['domain']}"
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            acc_cfg.regConfig.registrarUri = f"sip:{self.sip_config['domain']}"
            acc_cfg.regConfig.registerOnAdd = True
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if self.sip_config['username'] and self.sip_config['password']:
                cred = pj.AuthCredInfo()
                cred.scheme = "digest"
                cred.realm = "*"
                cred.username = self.sip_config['username']
                cred.data = self.sip_config['password']
                acc_cfg.sipConfig.authCreds.append(cred)
            
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–∞—à–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            self.account = AIAccount()
            self.account.create(acc_cfg)
            
            logger.info(f"‚úÖ SIP –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {acc_cfg.idUri}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SIP –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SIP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.account:
                self.account.shutdown()
                
            if self.ep:
                self.ep.libDestroy()
                
            logger.info("‚úÖ SIP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SIP —Å–µ—Ä–≤–µ—Ä–∞: {e}")


class AIAccount(pj.Account):
    """
    SIP –∞–∫–∫–∞—É–Ω—Ç —Å AI –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
    """
    
    def onRegState(self, prm):
        """Callback —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        info = self.getInfo()
        logger.info(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {info.regStatus} {info.regStatusText}")
        
    def onIncomingCall(self, prm):
        """Callback –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        call = AICallHandler(self, prm.callId)
        ci = call.getInfo()
        
        logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç: {ci.remoteUri}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
        op = pj.CallOpParam()
        op.statusCode = 200  # OK
        call.answer(op)
        
        logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
sip_server = None


def start_sip_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å SIP —Å–µ—Ä–≤–µ—Ä"""
    global sip_server
    
    try:
        sip_server = SIPServer()
        sip_server.start()
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SIP —Å–µ—Ä–≤–µ—Ä–∞...")
        if sip_server:
            sip_server.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if sip_server:
            sip_server.stop()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ SIP —Å–µ—Ä–≤–µ—Ä–∞
    start_sip_server()