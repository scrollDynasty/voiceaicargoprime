"""
RingCentral API Client —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, refresh tokens –∏ API –≤—ã–∑–æ–≤—ã
"""

import asyncio
import logging
import os
import time
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import json

from ringcentral import SDK
from ringcentral.http.api_exception import ApiException
import aiohttp
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)


class RingCentralClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RingCentral API
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ Config.RINGCENTRAL
        """
        self.config = config
        self.sdk = SDK(
            config['client_id'],
            config['client_secret'],
            config['server']
        )
        self.platform = self.sdk.platform()
        self.token_expires_at = None
        self.subscription = None
        self._refresh_lock = asyncio.Lock()
        
        logger.info("RingCentral –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def log_auth_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        jwt_present = "‚úÖ Present" if os.getenv('RINGCENTRAL_JWT_TOKEN') else "‚ùå Missing"
        auth_method = os.getenv('RINGCENTRAL_AUTH_METHOD', 'jwt')
        
        logger.info("üîê RingCentral Authentication Status:")
        logger.info(f"   Auth Method: {auth_method}")
        logger.info(f"   JWT Token: {jwt_present}")
        logger.info(f"   Client ID: {self.config.get('client_id', 'Missing')}")
        logger.info(f"   Server: {self.config.get('server', 'Missing')}")
    
    async def authenticate_jwt(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            jwt_token = os.getenv('RINGCENTRAL_JWT_TOKEN')
            
            if not jwt_token:
                raise Exception("RINGCENTRAL_JWT_TOKEN not found in environment")
            
            logger.info("üîë Attempting JWT authentication...")
            self.platform.login(jwt=jwt_token)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = self.platform.auth().data()
            self.token_expires_at = time.time() + token_info.get('expires_in', 3600)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            extension_info = self.platform.get('/restapi/v1.0/account/~/extension/~').json()
            logger.info(f"‚úÖ RingCentral successfully authenticated with JWT! User: {extension_info.get('name', 'Unknown')}")
            
            return True
            
        except ApiException as e:
            error_msg = str(e)
            if "OAU-251" in error_msg or "unauthorized_client" in error_msg:
                logger.error(f"‚ùå JWT authentication failed - unauthorized client: {e}")
            else:
                logger.error(f"‚ùå RingCentral JWT authentication failed: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå JWT authentication error: {e}")
            raise
    
    async def authenticate_password(self) -> bool:
        """Fallback –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""
        try:
            username = self.config.get('username')
            password = self.config.get('password')
            
            if not all([username, password]):
                raise Exception("Missing username or password for fallback authentication")
            
            logger.warning("‚ö†Ô∏è Using deprecated username/password authentication as fallback")
            self.platform.login(username=username, password=password)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = self.platform.auth().data()
            self.token_expires_at = time.time() + token_info.get('expires_in', 3600)
            
            logger.info("‚úÖ Successfully authenticated with username/password (fallback)")
            return True
            
        except ApiException as e:
            logger.error(f"‚ùå RingCentral password authentication failed: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Password authentication error: {e}")
            raise
    
    async def authenticate(self) -> bool:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–∞ —Å fallback –Ω–∞ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.log_auth_status()
        
        auth_method = os.getenv('RINGCENTRAL_AUTH_METHOD', 'jwt')
        
        try:
            if auth_method == 'jwt':
                try:
                    return await self.authenticate_jwt()
                except Exception as jwt_error:
                    logger.warning(f"JWT authentication failed: {jwt_error}, trying password fallback...")
                    return await self.authenticate_password()
            else:
                return await self.authenticate_password()
                
        except Exception as e:
            logger.error(f"‚ùå All authentication methods failed: {e}")
            return False
    
    async def refresh_token(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è refresh token
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        async with self._refresh_lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω
                if self.token_expires_at and time.time() < self.token_expires_at - 300:
                    return True
                
                logger.info("–û–±–Ω–æ–≤–ª—è–µ–º access —Ç–æ–∫–µ–Ω...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                self.platform.refresh()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                token_info = self.platform.auth().data()
                self.token_expires_at = time.time() + token_info.get('expires_in', 3600)
                
                logger.info("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
                
            except ApiException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                return await self.authenticate()
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                return False
    
    async def ensure_authenticated(self) -> bool:
        """
        –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        """
        if not self.platform.logged_in():
            return await self.authenticate()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        if self.token_expires_at and time.time() >= self.token_expires_at - 300:
            return await self.refresh_token()
        
        return True
    
    async def create_webhook_subscription(self, event_filters: List[str], delivery_mode: Dict[str, str]) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        
        Args:
            event_filters: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['/restapi/v1.0/account/~/extension/~/telephony/sessions'])
            delivery_mode: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ webhook
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            await self.ensure_authenticated()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_data = {
                'eventFilters': event_filters,
                'deliveryMode': delivery_mode,
                'expiresIn': 86400  # 24 —á–∞—Å–∞
            }
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º webhook –ø–æ–¥–ø–∏—Å–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {event_filters}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            response = self.platform.post('/subscription', subscription_data)
            subscription_info = response.json()
            
            logger.info(f"Webhook –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {subscription_info['id']}")
            return subscription_info
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None
    
    async def get_call_session(self, telephony_session_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
        """
        try:
            await self.ensure_authenticated()
            
            response = self.platform.get(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}'
            )
            
            return response.json()
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ {telephony_session_id}: {e}")
            return None
    
    async def answer_call(self, telephony_session_id: str, party_id: str) -> bool:
        """
        –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            response = self.platform.post(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/answer'
            )
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {telephony_session_id} –ø—Ä–∏–Ω—è—Ç")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {e}")
            return False
    
    async def transfer_call(self, telephony_session_id: str, party_id: str, 
                          transfer_to: str, transfer_type: str = 'blind') -> bool:
        """
        –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω–æ–∫ –Ω–∞ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            transfer_to: –ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            transfer_type: –¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞ ('blind' –∏–ª–∏ 'attended')
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            transfer_data = {
                'phoneNumber': transfer_to,
                'transferType': transfer_type
            }
            
            response = self.platform.post(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/transfer',
                transfer_data
            )
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {telephony_session_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ {transfer_to}")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def forward_call(self, telephony_session_id: str, party_id: str, forward_to: str) -> bool:
        """
        –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            forward_to: –ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            forward_data = {
                'phoneNumber': forward_to
            }
            
            response = self.platform.post(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/forward',
                forward_data
            )
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {telephony_session_id} –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω –Ω–∞ {forward_to}")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def hangup_call(self, telephony_session_id: str, party_id: str) -> bool:
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            response = self.platform.delete(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}'
            )
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {telephony_session_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def hold_call(self, telephony_session_id: str, party_id: str) -> bool:
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–≤–æ–Ω–æ–∫ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            response = self.platform.post(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/hold'
            )
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {telephony_session_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–≤–æ–Ω–∫–∞ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {e}")
            return False
    
    async def unhold_call(self, telephony_session_id: str, party_id: str) -> bool:
        """
        –°–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            response = self.platform.post(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/unhold'
            )
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {telephony_session_id} —Å–Ω—è—Ç —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
            return False
    
    async def send_dtmf(self, telephony_session_id: str, party_id: str, dtmf_string: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å DTMF —Ç–æ–Ω—ã –≤ –∑–≤–æ–Ω–æ–∫
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
            dtmf_string: –°—Ç—Ä–æ–∫–∞ DTMF —Ç–æ–Ω–æ–≤ (0-9, *, #)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.ensure_authenticated()
            
            dtmf_data = {
                'dtmf': dtmf_string
            }
            
            response = self.platform.post(
                f'/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/send-dtmf',
                dtmf_data
            )
            
            logger.info(f"DTMF '{dtmf_string}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∑–≤–æ–Ω–æ–∫ {telephony_session_id}")
            return True
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DTMF: {e}")
            return False
    
    async def get_extension_info(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º extension
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± extension –∏–ª–∏ None
        """
        try:
            await self.ensure_authenticated()
            
            response = self.platform.get('/account/~/extension/~')
            return response.json()
            
        except ApiException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± extension: {e}")
            return None
    
    async def validate_webhook_token(self, validation_token: str, webhook_secret: str) -> str:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å webhook token –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            validation_token: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç RingCentral
            webhook_secret: –°–µ–∫—Ä–µ—Ç webhook –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        import hashlib
        import hmac
        
        # –°–æ–∑–¥–∞–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
        signature = hmac.new(
            webhook_secret.encode('utf-8'),
            validation_token.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        return signature
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            if self.subscription:
                self.subscription.cancel()
            logger.info("RingCentral –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_client_instance = None


def get_ringcentral_client(config: Dict[str, Any]) -> RingCentralClient:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä RingCentral –∫–ª–∏–µ–Ω—Ç–∞
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ Config.RINGCENTRAL
        
    Returns:
        RingCentralClient: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
    """
    global _client_instance
    
    if _client_instance is None:
        _client_instance = RingCentralClient(config)
    
    return _client_instance


async def test_ringcentral_auth():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RingCentral –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    from config import Config
    
    logger.info("üß™ Starting RingCentral authentication test...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = get_ringcentral_client(Config.RINGCENTRAL)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_result = await client.authenticate()
        
        if auth_result:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤
            try:
                response = client.platform.get('/restapi/v1.0/account/~/extension/~')
                user_info = response.json()
                logger.info(f"‚úÖ Authentication test PASSED!")
                logger.info(f"   User: {user_info.get('name', 'Unknown')}")
                logger.info(f"   Extension: {user_info.get('extensionNumber', 'Unknown')}")
                logger.info(f"   Status: {user_info.get('status', 'Unknown')}")
                return True
            except Exception as api_error:
                logger.error(f"‚ùå API test failed: {api_error}")
                return False
        else:
            logger.error("‚ùå Authentication test FAILED - could not authenticate")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Authentication test FAILED with error: {e}")
        return False


# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    import asyncio
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_ringcentral_auth())