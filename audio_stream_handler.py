"""
Audio Stream Handler
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤ –º–µ–∂–¥—É WebPhone –∏ Python Voice AI
"""

import asyncio
import json
import logging
import numpy as np
import websockets
from typing import Dict, Any, Optional, List
import threading
import queue
from datetime import datetime

from speech_processor import speech_processor, async_transcribe, async_synthesize
from llm_handler import generate_ai_response
from config import Config

logger = logging.getLogger(__name__)

class AudioStreamHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è WebPhone –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤"""
        self.active_streams: Dict[str, Dict[str, Any]] = {}
        self.ws_server = None
        self.processing_queue = queue.Queue()
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        self.sample_rate = Config.SPEECH["sample_rate"]
        self.chunk_size = 1024
        self.silence_threshold = 0.01
        self.silence_duration = 1.5  # —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
    async def start_websocket_server(self, port: int = 8080):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞—É–¥–∏–æ –æ—Ç WebPhone"""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        async def handle_audio_stream(websocket, path):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
            # –ò–∑–≤–ª–µ–∫–∞–µ–º call_id –∏–∑ –ø—É—Ç–∏
            call_id = path.strip('/').split('/')[-1]
            logger.info(f"üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∑–≤–æ–Ω–∫–∞
            stream_session = {
                'call_id': call_id,
                'websocket': websocket,
                'audio_buffer': bytearray(),
                'last_audio_time': datetime.now(),
                'conversation_history': [],
                'is_processing': False
            }
            
            self.active_streams[call_id] = stream_session
            
            try:
                async for message in websocket:
                    if isinstance(message, bytes):
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
                        stream_session['audio_buffer'].extend(message)
                        stream_session['last_audio_time'] = datetime.now()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∞—É–¥–∏–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if len(stream_session['audio_buffer']) >= self.sample_rate * 2:  # 2 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ
                            await self._process_audio_chunk(call_id)
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
                        try:
                            data = json.loads(message)
                            await self._handle_command(call_id, data)
                        except json.JSONDecodeError:
                            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON: {message}")
                            
            except websockets.exceptions.ConnectionClosed:
                logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}: {e}")
            finally:
                # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                if call_id in self.active_streams:
                    del self.active_streams[call_id]
                logger.info(f"üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        self.ws_server = await websockets.serve(
            handle_audio_stream,
            "localhost",
            port,
            ping_interval=20,
            ping_timeout=10
        )
        
        logger.info(f"‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:{port}")
        self.is_running = True
        
    async def _process_audio_chunk(self, call_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞"""
        session = self.active_streams.get(call_id)
        if not session or session['is_processing']:
            return
        
        session['is_processing'] = True
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –±—É—Ñ–µ—Ä–∞
            audio_data = bytes(session['audio_buffer'])
            session['audio_buffer'].clear()
            
            if len(audio_data) < 1000:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
                session['is_processing'] = False
                return
            
            logger.info(f"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(audio_data)} –±–∞–π—Ç –∞—É–¥–∏–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            
            # 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)
            user_text = await async_transcribe(audio_data)
            
            if user_text and user_text.strip():
                logger.info(f"üí¨ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {user_text}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                session['conversation_history'].append({
                    'role': 'user',
                    'content': user_text,
                    'timestamp': datetime.now().isoformat()
                })
                
                # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM
                ai_response = await generate_ai_response(
                    user_text,
                    conversation_history=session['conversation_history']
                )
                
                logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {ai_response}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                session['conversation_history'].append({
                    'role': 'assistant',
                    'content': ai_response,
                    'timestamp': datetime.now().isoformat()
                })
                
                # 3. –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (TTS)
                audio_response = await async_synthesize(ai_response)
                
                # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ WebSocket
                if session['websocket'].open:
                    await session['websocket'].send(audio_response)
                    logger.info(f"üîä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(audio_response)} –±–∞–π—Ç –∞—É–¥–∏–æ")
                else:
                    logger.warning(f"WebSocket –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}: {e}")
        finally:
            session['is_processing'] = False
    
    async def _handle_command(self, call_id: str, command: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç WebPhone"""
        cmd_type = command.get('type')
        
        if cmd_type == 'start_recording':
            logger.info(f"üî¥ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        elif cmd_type == 'stop_recording':
            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        elif cmd_type == 'get_transcript':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            session = self.active_streams.get(call_id)
            if session:
                transcript = {
                    'type': 'transcript',
                    'call_id': call_id,
                    'history': session['conversation_history']
                }
                await session['websocket'].send(json.dumps(transcript))
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd_type}")
    
    async def handle_webphone_call(self, call_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç WebPhone (HTTP endpoint)
        
        Args:
            call_data: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ –æ—Ç WebPhone
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è WebPhone
        """
        call_id = call_data.get('callId')
        from_number = call_data.get('from', 'Unknown')
        
        logger.info(f"üìû –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç WebPhone: {call_id} –æ—Ç {from_number}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = self._generate_greeting(from_number)
        
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        try:
            greeting_audio = await async_synthesize(greeting)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import os
            os.makedirs("recordings", exist_ok=True)
            filename = f"recordings/greeting_{call_id}.wav"
            with open(filename, "wb") as f:
                f.write(greeting_audio)
            logger.info(f"üíæ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
            
            return {
                'status': 'success',
                'call_id': call_id,
                'greeting': greeting,
                'audio_file': filename,
                'websocket_url': f'ws://localhost:8080/audio/{call_id}'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def _generate_greeting(self, from_number: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∑–≤–æ–Ω—è—â–µ–≥–æ"""
        # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞
        if from_number == 'Unknown':
            return (
                "Hello! Thank you for calling Prime Cargo Logistics. "
                "I'm your AI assistant, and I'm here to help you with tracking shipments, "
                "scheduling pickups, or any other logistics needs. "
                "How can I assist you today?"
            )
        else:
            return (
                f"Hi there! Welcome back to Prime Cargo Logistics. "
                f"I see you're calling from {from_number}. "
                f"I'm here to help with any logistics questions or concerns you might have. "
                f"What can I do for you today?"
            )
    
    def get_active_calls(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
        return [
            {
                'call_id': call_id,
                'duration': (datetime.now() - session['last_audio_time']).total_seconds(),
                'messages': len(session['conversation_history'])
            }
            for call_id, session in self.active_streams.items()
        ]
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Audio Stream Handler...")
        
        self.is_running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for call_id, session in list(self.active_streams.items()):
            if session['websocket'].open:
                await session['websocket'].close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if self.ws_server:
            self.ws_server.close()
            await self.ws_server.wait_closed()
        
        logger.info("‚úÖ Audio Stream Handler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
audio_stream_handler = AudioStreamHandler()