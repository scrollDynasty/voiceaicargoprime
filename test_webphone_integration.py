#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebPhone + Python AI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import aiohttp
import json
import logging
import time
import websockets
from datetime import datetime
import subprocess
import requests
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class WebPhoneIntegrationTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebPhone + Python AI"""
    
    def __init__(self):
        self.python_server = "http://localhost:5000"
        self.websocket_server = "ws://localhost:8080"
        self.test_results = {}
        
    def print_banner(self):
        """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ —Ç–µ—Å—Ç–∞"""
        print("=" * 60)
        print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò WEBPHONE + PYTHON AI")
        print("Prime Cargo Logistics Voice AI System")
        print("=" * 60)
        print()
    
    def check_process_running(self, process_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ PID —Ñ–∞–π–ª
            pid_file = f"logs/{process_name}.pid"
            if os.path.exists(pid_file):
                with open(pid_file, 'r') as f:
                    pid = int(f.read().strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω
                try:
                    os.kill(pid, 0)
                    return True
                except OSError:
                    return False
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_name}: {e}")
            return False
    
    def test_python_server_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è Python —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üêç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python AI —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            response = requests.get(f"{self.python_server}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ Python —Å–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤: {data.get('status')}")
                logger.info(f"   LLM: {'‚úÖ' if data.get('llm_healthy') else '‚ùå'}")
                logger.info(f"   Speech Processor: {'‚úÖ' if data.get('speech_processor_initialized') else '‚ùå'}")
                return True
            else:
                logger.error(f"‚ùå Python —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    def test_webphone_endpoint(self) -> bool:
        """–¢–µ—Å—Ç WebPhone endpoint"""
        logger.info("üìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebPhone endpoint...")
        
        test_call_data = {
            "callId": "test-call-" + str(int(time.time())),
            "sessionId": "test-session-123",
            "from": "+15139283626",
            "to": "+12345678901",
            "timestamp": datetime.now().isoformat(),
            "source": "webphone"
        }
        
        try:
            response = requests.post(
                f"{self.python_server}/api/handle-webphone-call",
                json=test_call_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ WebPhone endpoint –æ—Ç–≤–µ—á–∞–µ—Ç: {data.get('status')}")
                logger.info(f"   Call ID: {data.get('call_id')}")
                logger.info(f"   Greeting: {data.get('greeting', 'N/A')[:50]}...")
                return True
            else:
                logger.error(f"‚ùå WebPhone endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                logger.error(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebPhone endpoint: {e}")
            return False
    
    async def test_websocket_connection(self) -> bool:
        """–¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ"""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        test_call_id = "test-ws-" + str(int(time.time()))
        ws_url = f"{self.websocket_server}/audio/{test_call_id}"
        
        try:
            async with websockets.connect(ws_url) as websocket:
                logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = {
                    "type": "audio",
                    "call_id": test_call_id,
                    "data": "dGVzdCBhdWRpbyBkYXRh"  # "test audio data" –≤ base64
                }
                
                await websocket.send(json.dumps(test_message))
                logger.info("üì§ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5)
                    response_data = json.loads(response)
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_data.get('type')}")
                    return True
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç WebSocket")
                    return True  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_webphone_status(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ WebPhone"""
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WebPhone...")
        
        try:
            response = requests.get(f"{self.python_server}/api/webphone/status", timeout=5)
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ WebPhone —Å—Ç–∞—Ç—É—Å: {data.get('status')}")
                logger.info(f"   WebSocket: {'‚úÖ' if data.get('websocket_running') else '‚ùå'}")
                logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {data.get('active_calls', 0)}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def test_dependencies(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        dependencies = {
            "Python AI Server": self.check_process_running("python-server"),
            "WebPhone Bridge": self.check_process_running("webphone-bridge")
        }
        
        all_running = True
        for name, running in dependencies.items():
            status = "‚úÖ" if running else "‚ùå"
            logger.info(f"   {name}: {status}")
            if not running:
                all_running = False
        
        return all_running
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.print_banner()
        
        tests = [
            ("Dependencies Check", self.test_dependencies),
            ("Python Server Health", self.test_python_server_health),
            ("WebPhone Endpoint", self.test_webphone_endpoint),
            ("WebPhone Status", self.test_webphone_status),
            ("WebSocket Connection", self.test_websocket_connection)
        ]
        
        results = {}
        
        for test_name, test_func in tests:
            logger.info(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            logger.info("-" * 40)
            
            try:
                if asyncio.iscoroutinefunction(test_func):
                    result = await test_func()
                else:
                    result = test_func()
                
                results[test_name] = result
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ {test_name}: {e}")
                results[test_name] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary(results)
    
    def print_summary(self, results: dict):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        passed = sum(1 for r in results.values() if r)
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {test_name:<30} {status}")
        
        print("-" * 60)
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if not results.get("Dependencies Check"):
                print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./start_system.sh –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            if not results.get("Python Server Health"):
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Python —Å–µ—Ä–≤–µ—Ä–∞: tail -f logs/python-server.log")
            if not results.get("WebPhone Status"):
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ WebPhone: tail -f logs/webphone-bridge.log")
        
        print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WebPhoneIntegrationTest()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())