"""
WebRTC Integration for RingCentral Voice AI
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç real-time audio streaming –¥–ª—è AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""

import logging
import asyncio
import json
import websockets
from typing import Dict, Any, Optional, Callable
from dataclasses import dataclass
from enum import Enum
import threading
import queue
import time

from config import Config
from ringcentral_auth import make_request

logger = logging.getLogger(__name__)

class WebRTCState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    CONNECTED = "connected"
    FAILED = "failed"
    CLOSED = "closed"

@dataclass
class WebRTCSession:
    """WebRTC —Å–µ—Å—Å–∏—è"""
    session_id: str
    telephony_session_id: str
    party_id: str
    websocket_url: Optional[str] = None
    state: WebRTCState = WebRTCState.DISCONNECTED
    audio_in_queue: queue.Queue = None
    audio_out_queue: queue.Queue = None
    
    def __post_init__(self):
        self.audio_in_queue = queue.Queue()
        self.audio_out_queue = queue.Queue()

class WebRTCManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è RingCentral"""
    
    def __init__(self):
        self.sessions: Dict[str, WebRTCSession] = {}
        self.ws_connections: Dict[str, websockets.WebSocketClientProtocol] = {}
        self.audio_callback: Optional[Callable] = None
        
    async def create_webrtc_session(self, telephony_session_id: str, party_id: str) -> WebRTCSession:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é WebRTC —Å–µ—Å—Å–∏—é –¥–ª—è –∑–≤–æ–Ω–∫–∞
        
        Args:
            telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
            
        Returns:
            WebRTCSession: –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        """
        try:
            logger.info(f"üåê –°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {telephony_session_id}")
            
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ RingCentral API
            response = make_request(
                'POST',
                f'/restapi/v1.0/account/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/webrtc',
                {
                    'audio': {
                        'mode': 'bidirectional',  # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ
                        'codecs': ['PCMU', 'PCMA', 'opus']  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–¥–µ–∫–∏
                    }
                }
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            session_id = response.get('id')
            websocket_url = response.get('websocketUrl')
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = WebRTCSession(
                session_id=session_id,
                telephony_session_id=telephony_session_id,
                party_id=party_id,
                websocket_url=websocket_url
            )
            
            self.sessions[session_id] = session
            
            logger.info(f"‚úÖ WebRTC —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
            return session
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebRTC —Å–µ—Å—Å–∏–∏: {str(e)}")
            raise
    
    async def connect_session(self, session: WebRTCSession) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebRTC —Å–µ—Å—Å–∏–∏
        
        Args:
            session: WebRTC —Å–µ—Å—Å–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not session.websocket_url:
                logger.error("‚ùå –ù–µ—Ç WebSocket URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return False
                
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {session.websocket_url}")
            
            session.state = WebRTCState.CONNECTING
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            ws = await websockets.connect(session.websocket_url)
            self.ws_connections[session.session_id] = ws
            
            session.state = WebRTCState.CONNECTED
            logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session.session_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            asyncio.create_task(self._handle_websocket_messages(session, ws))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ
            asyncio.create_task(self._send_audio_stream(session, ws))
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {str(e)}")
            session.state = WebRTCState.FAILED
            return False
    
    async def _handle_websocket_messages(self, session: WebRTCSession, ws: websockets.WebSocketClientProtocol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
        try:
            async for message in ws:
                try:
                    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if isinstance(message, bytes):
                        # –≠—Ç–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                        session.audio_in_queue.put(message)
                        
                        # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        if self.audio_callback:
                            self.audio_callback(session.session_id, message)
                    else:
                        # –≠—Ç–æ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ
                        data = json.loads(message)
                        await self._handle_control_message(session, data)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session.session_id}")
            session.state = WebRTCState.CLOSED
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ WebSocket: {str(e)}")
            session.state = WebRTCState.FAILED
    
    async def _send_audio_stream(self, session: WebRTCSession, ws: websockets.WebSocketClientProtocol):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ WebSocket"""
        try:
            while session.state == WebRTCState.CONNECTED:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                    audio_data = await asyncio.get_event_loop().run_in_executor(
                        None, session.audio_out_queue.get, True, 0.1
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                    await ws.send(audio_data)
                    
                except queue.Empty:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.sleep(0.01)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {str(e)}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {str(e)}")
    
    async def _handle_control_message(self, session: WebRTCSession, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        msg_type = message.get('type')
        
        if msg_type == 'connected':
            logger.info(f"‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session.session_id}")
        elif msg_type == 'disconnected':
            logger.info(f"üîå WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session.session_id}")
            session.state = WebRTCState.DISCONNECTED
        elif msg_type == 'error':
            logger.error(f"‚ùå WebRTC –æ—à–∏–±–∫–∞: {message.get('error')}")
            session.state = WebRTCState.FAILED
        else:
            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    
    def send_audio(self, session_id: str, audio_data: bytes) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ—Å—Å–∏—é
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å
        """
        session = self.sessions.get(session_id)
        if not session or session.state != WebRTCState.CONNECTED:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return False
            
        try:
            session.audio_out_queue.put(audio_data)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥—å: {str(e)}")
            return False
    
    def get_audio(self, session_id: str, timeout: float = 0.1) -> Optional[bytes]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ —Å–µ—Å—Å–∏–∏
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Optional[bytes]: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        session = self.sessions.get(session_id)
        if not session:
            return None
            
        try:
            return session.audio_in_queue.get(timeout=timeout)
        except queue.Empty:
            return None
    
    def set_audio_callback(self, callback: Callable[[str, bytes], None]):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ
        
        Args:
            callback: –§—É–Ω–∫—Ü–∏—è callback(session_id, audio_data)
        """
        self.audio_callback = callback
    
    async def disconnect_session(self, session_id: str):
        """
        –û—Ç–∫–ª—é—á–∏—Ç—å WebRTC —Å–µ—Å—Å–∏—é
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
        """
        session = self.sessions.get(session_id)
        if not session:
            return
            
        logger.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebRTC —Å–µ—Å—Å–∏–∏ {session_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
        ws = self.ws_connections.get(session_id)
        if ws:
            await ws.close()
            del self.ws_connections[session_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        session.state = WebRTCState.DISCONNECTED
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        del self.sessions[session_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
webrtc_manager = WebRTCManager()

async def setup_webrtc_for_call(telephony_session_id: str, party_id: str) -> Optional[str]:
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å WebRTC –¥–ª—è –∑–≤–æ–Ω–∫–∞
    
    Args:
        telephony_session_id: ID —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        party_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
        
    Returns:
        Optional[str]: ID WebRTC —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
    """
    try:
        # –°–æ–∑–¥–∞–µ–º WebRTC —Å–µ—Å—Å–∏—é
        session = await webrtc_manager.create_webrtc_session(telephony_session_id, party_id)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if await webrtc_manager.connect_session(session):
            return session.session_id
        else:
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebRTC: {str(e)}")
        return None

def send_audio_to_webrtc(session_id: str, audio_data: bytes) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ WebRTC
    
    Args:
        session_id: ID WebRTC —Å–µ—Å—Å–∏–∏
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    return webrtc_manager.send_audio(session_id, audio_data)

def get_audio_from_webrtc(session_id: str, timeout: float = 0.1) -> Optional[bytes]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ WebRTC
    
    Args:
        session_id: ID WebRTC —Å–µ—Å—Å–∏–∏
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        
    Returns:
        Optional[bytes]: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
    """
    return webrtc_manager.get_audio(session_id, timeout)

def set_webrtc_audio_callback(callback: Callable[[str, bytes], None]):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ
    
    Args:
        callback: –§—É–Ω–∫—Ü–∏—è callback(session_id, audio_data)
    """
    webrtc_manager.set_audio_callback(callback)