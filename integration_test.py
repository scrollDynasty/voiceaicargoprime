#!/usr/bin/env python3
"""
Integration Test –¥–ª—è Voice AI System —Å WebPhone
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import time
import requests
import websockets
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class IntegrationTest:
    def __init__(self):
        self.python_server = "http://localhost:5000"
        self.websocket_url = "ws://localhost:8080"
        self.test_results = []
        
    def add_result(self, test_name, success, message=""):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results.append({
            "test": test_name,
            "success": success,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })
        
        icon = "‚úÖ" if success else "‚ùå"
        logger.info(f"{icon} {test_name}: {message}")
    
    def test_python_server(self):
        """–¢–µ—Å—Ç Python —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # Health check
            response = requests.get(f"{self.python_server}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                self.add_result("Python Server Health", True, f"Status: {data.get('status')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Voice AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                voice_ai = data.get('voice_ai_status', {})
                if voice_ai.get('speech_processor_initialized'):
                    self.add_result("Speech Processor", True, "Whisper –∏ TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    self.add_result("Speech Processor", False, "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
                if voice_ai.get('llm_healthy'):
                    self.add_result("LLM Handler", True, "Llama –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    self.add_result("LLM Handler", False, "LLM –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.add_result("Python Server Health", False, f"Status code: {response.status_code}")
                
        except Exception as e:
            self.add_result("Python Server", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def test_webphone_endpoint(self):
        """–¢–µ—Å—Ç WebPhone —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebPhone —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
            test_call = {
                "callId": "test-call-123",
                "sessionId": "test-session-456",
                "from": "+1234567890",
                "to": "+0987654321",
                "timestamp": datetime.now().isoformat(),
                "source": "webphone"
            }
            
            response = requests.post(
                f"{self.python_server}/api/handle-webphone-call",
                json=test_call,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    self.add_result("WebPhone Endpoint", True, "–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    if data.get('greeting'):
                        self.add_result("Greeting Generation", True, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {data['greeting'][:50]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
                    if data.get('audio_file'):
                        self.add_result("TTS Audio", True, f"–ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {data['audio_file']}")
                else:
                    self.add_result("WebPhone Endpoint", False, f"Status: {data.get('status')}")
            else:
                self.add_result("WebPhone Endpoint", False, f"Status code: {response.status_code}")
                
        except Exception as e:
            self.add_result("WebPhone Endpoint", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_websocket_connection(self):
        """–¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            uri = f"{self.websocket_url}/audio/test-ws-call"
            async with websockets.connect(uri) as websocket:
                self.add_result("WebSocket Connection", True, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
                test_command = {
                    "type": "get_transcript",
                    "call_id": "test-ws-call"
                }
                
                await websocket.send(json.dumps(test_command))
                self.add_result("WebSocket Send", True, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    self.add_result("WebSocket Receive", True, f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {len(response)} –±–∞–π—Ç")
                except asyncio.TimeoutError:
                    self.add_result("WebSocket Receive", True, "–¢–∞–π–º–∞—É—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞)")
                    
        except Exception as e:
            self.add_result("WebSocket Connection", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def test_webphone_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ WebPhone –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ WebPhone...")
        
        try:
            response = requests.get(f"{self.python_server}/api/webphone/status", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                self.add_result("WebPhone Status", True, f"Status: {data.get('status')}")
                
                if data.get('websocket_running'):
                    self.add_result("WebSocket Server", True, "WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.add_result("WebSocket Server", False, "WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                    
                active_calls = data.get('active_calls', 0)
                self.add_result("Active Calls", True, f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {active_calls}")
            else:
                self.add_result("WebPhone Status", False, f"Status code: {response.status_code}")
                
        except Exception as e:
            self.add_result("WebPhone Status", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def test_ai_components(self):
        """–¢–µ—Å—Ç AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é"""
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            from speech_processor import async_synthesize
            from llm_handler import generate_ai_response
            
            # –¢–µ—Å—Ç LLM
            test_question = "What are your shipping rates to California?"
            ai_response = await generate_ai_response(test_question)
            if ai_response:
                self.add_result("LLM Response", True, f"–û—Ç–≤–µ—Ç: {ai_response[:50]}...")
            else:
                self.add_result("LLM Response", False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            
            # –¢–µ—Å—Ç TTS
            test_text = "Hello, this is a test of the text to speech system."
            audio_data = await async_synthesize(test_text)
            if audio_data and len(audio_data) > 1000:
                self.add_result("TTS Synthesis", True, f"–ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
            else:
                self.add_result("TTS Synthesis", False, "–ê—É–¥–∏–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                
        except Exception as e:
            self.add_result("AI Components", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("\n" + "="*50)
        logger.info("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        logger.info("="*50)
        
        total = len(self.test_results)
        passed = sum(1 for r in self.test_results if r['success'])
        failed = total - passed
        
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total*100):.1f}%")
        
        if failed > 0:
            logger.info("\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for result in self.test_results:
                if not result['success']:
                    logger.info(f"  - {result['test']}: {result['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w') as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "summary": {
                    "total": total,
                    "passed": passed,
                    "failed": failed,
                    "success_rate": passed/total*100
                },
                "results": self.test_results
            }, f, indent=2)
        
        logger.info(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        
        return passed == total
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        logger.info("="*50)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã (5 —Å–µ–∫)...")
        time.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_python_server()
        self.test_webphone_endpoint()
        await self.test_websocket_connection()
        self.test_webphone_status()
        await self.test_ai_components()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        all_passed = self.generate_report()
        
        if all_passed:
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            logger.info("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        
        return all_passed

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IntegrationTest()
    success = await tester.run_all_tests()
    exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())