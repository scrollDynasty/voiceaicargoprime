"""
Webhook Server –¥–ª—è RingCentral –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç telephony/sessions —Å–æ–±—ã—Ç–∏—è –æ—Ç RingCentral
"""

import logging
import json
import asyncio
import hmac
import hashlib
import base64
from datetime import datetime
from typing import Dict, Any, Optional
from flask import Flask, request, jsonify, Response, make_response
from flask_cors import CORS
import threading
import time
from functools import wraps

from voice_ai_engine import voice_ai_engine
from speech_processor import async_synthesize
from config import Config
from ringcentral_auth import make_request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOGGING["level"]),
    format=Config.LOGGING["format"],
    handlers=[
        logging.FileHandler(Config.LOGGING["file"]),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Flask
app.logger.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request
def log_request_info():
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    logger.debug('=' * 80)
    logger.debug(f'Request: {request.method} {request.url}')
    logger.debug(f'Headers: {dict(request.headers)}')
    logger.debug(f'Content-Type: {request.content_type}')
    logger.debug(f'Content-Length: {request.content_length}')
    if request.method in ['POST', 'PUT', 'PATCH']:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_data(as_text=True)
        if data:
            logger.debug(f'Body (first 1000 chars): {data[:1000]}')
        else:
            logger.debug('Body: <empty>')
    logger.debug('=' * 80)

@app.after_request
def log_response_info(response):
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ"""
    logger.debug(f'Response: {response.status}')
    return response

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_calls = {}
call_lock = threading.Lock()
subscription_id = None

def disable_auto_json_parsing(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    Flask –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç JSON –∫–æ–≥–¥–∞ Content-Type: application/json
    –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_json
        original_get_json = request.get_json
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º get_json —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª None
        request.get_json = lambda *args, **kwargs: None
        
        try:
            result = f(*args, **kwargs)
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            request.get_json = original_get_json
        
        return result
    return decorated_function

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "ringcentral_connected": subscription_id is not None,
            "subscription_active": subscription_id is not None,
            "active_calls": len(active_calls),
            "voice_ai_status": voice_ai_engine.health_check()
        }
        return jsonify(health_data), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({"status": "unhealthy", "error": str(e)}), 500

@app.route('/webhook/validate', methods=['POST'])
def webhook_validate():
    """Endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook –æ—Ç RingCentral"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook")
    return jsonify({"status": "ok"}), 200

@app.route('/webhook/test', methods=['POST'])
def webhook_test():
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π POST –∑–∞–ø—Ä–æ—Å")
    return jsonify({"status": "ok", "message": "Webhook is working"}), 200

@app.route('/test/webhook', methods=['POST'])
def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook —Å–æ–±—ã—Ç–∏–π"""
    try:
        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô WEBHOOK - –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        logger.info(f"üß™ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        raw_data = request.get_data()
        logger.info(f"üß™ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data[:500]}")
        
        if raw_data:
            try:
                webhook_data = json.loads(raw_data.decode('utf-8'))
                logger.info(f"üß™ JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(webhook_data, indent=2)}")
            except json.JSONDecodeError as e:
                logger.error(f"üß™ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        
        return jsonify({"status": "test_received", "message": "Test webhook working"}), 200
        
    except Exception as e:
        logger.error(f"üß™ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook', methods=['GET', 'POST'])
@disable_auto_json_parsing
def ringcentral_webhook():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç RingCentral
    
    GET –∑–∞–ø—Ä–æ—Å—ã:
    - hub.challenge: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç challenge –∫–∞–∫ plain text)
    - caller, name, called: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç External App
    
    POST –∑–∞–ø—Ä–æ—Å—ã:
    - –ü—É—Å—Ç–æ–π POST: –í–∞–ª–∏–¥–∞—Ü–∏—è webhook (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Validation-Token)
    - JSON –¥–∞–Ω–Ω—ã–µ: –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π
    """
    logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω {request.method} –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'GET':
        logger.info(f"üîç GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.args)}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º hub.challenge –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook URL
        challenge = request.args.get('hub.challenge')
        if challenge:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω validation challenge: {challenge}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º challenge –∫–∞–∫ plain text (–Ω–µ JSON!)
            response = Response(challenge, content_type='text/plain')
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {challenge}")
            return response
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç External App
        caller = request.args.get('caller')
        name = request.args.get('name')
        called = request.args.get('called')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ)
        has_call_params = 'caller' in request.args or 'name' in request.args or 'called' in request.args
        
        if has_call_params:
            logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ External App")
            logger.info(f"   –ó–≤–æ–Ω—è—â–∏–π: {caller or 'Unknown'}")
            logger.info(f"   –ò–º—è: {name or 'Unknown'}")
            logger.info(f"   –í—ã–∑—ã–≤–∞–µ–º—ã–π –Ω–æ–º–µ—Ä: {called or 'Unknown'}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫
            call_data = {
                'caller': caller or 'Unknown',
                'name': name or 'Unknown',
                'called': called or 'Unknown',
                'source': 'external_app'
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=process_call, args=(call_data,)).start()
            
            return jsonify({
                "status": "call_received",
                "message": "Call processing started",
                "caller": caller or 'Unknown',
                "name": name or 'Unknown',
                "called": called or 'Unknown'
            }), 200
        
        # 3. –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.warning("‚ùå GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        logger.warning(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.args)}")
        return jsonify({
            "error": "Missing required parameters",
            "expected": ["hub.challenge", "caller", "name", "called"],
            "received": dict(request.args)
        }), 400
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤
    elif request.method == 'POST':
        logger.info(f"üì® POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_data = request.get_data()
        logger.debug(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(raw_data)} –±–∞–π—Ç")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook
        if not raw_data:
            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Validation-Token –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            validation_token = request.headers.get('Validation-Token')
            if validation_token:
                logger.info(f"üîë –í–æ–∑–≤—Ä–∞—â–∞–µ–º Validation-Token: {validation_token}")
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Validation-Token
                response = make_response(jsonify({"status": "ok"}), 200)
                response.headers['Validation-Token'] = validation_token
                response.headers['Content-Type'] = 'application/json'
                return response
            else:
                logger.info("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π OK –æ—Ç–≤–µ—Ç")
                return jsonify({"status": "ok"}), 200
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–¥–µ–ª–∞–µ–º –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON)
        if not _verify_webhook_signature(request):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({"error": "Invalid signature"}), 401
        
        # 3. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            webhook_data = json.loads(raw_data.decode('utf-8'))
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ: {json.dumps(webhook_data, indent=2)}")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(f"üìÑ Raw data: {raw_data[:500]}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            return jsonify({"error": "Invalid JSON"}), 400
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è
        event_type = webhook_data.get('eventType', 'unknown')
        uuid = webhook_data.get('uuid', 'unknown')
        logger.info(f"üîç –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}, UUID: {uuid}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º body –∏–∑ webhook payload
        body = webhook_data.get('body', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telephonySessionId –¥–ª—è telephony —Å–æ–±—ã—Ç–∏–π
        if body.get('telephonySessionId'):
            logger.info(f"üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º telephony —Å–æ–±—ã—Ç–∏–µ")
            return _handle_telephony_session(body)
        else:
            logger.info(f"üìã –ù–µ telephony —Å–æ–±—ã—Ç–∏–µ: {webhook_data.get('uuid', 'unknown')}")
            return jsonify({"status": "received"}), 200
    
    # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
    else:
        logger.warning(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {request.method}")
        return jsonify({"error": "Method not allowed"}), 405

def _verify_webhook_signature(request) -> bool:
    """
    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç RingCentral
    
    RingCentral –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫: X-RC-Signature
    - –ê–ª–≥–æ—Ä–∏—Ç–º: HMAC-SHA1
    - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: Base64
    
    Args:
        request: Flask request –æ–±—ä–µ–∫—Ç
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ RingCentral
    signature = request.headers.get('X-RC-Signature')
    if not signature:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        logger.debug("–ü–æ–¥–ø–∏—Å—å webhook –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        return True
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    webhook_secret = Config.RINGCENTRAL.get('webhook_secret')
    if not webhook_secret:
        logger.debug("Webhook secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
        return True
    
    try:
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è HMAC –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è RingCentral
        body = request.get_data()
        expected = base64.b64encode(
            hmac.new(
                webhook_secret.encode('utf-8'), 
                body, 
                hashlib.sha1
            ).digest()
        ).decode()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        is_valid = hmac.compare_digest(signature, expected)
        
        if is_valid:
            logger.debug("–ü–æ–¥–ø–∏—Å—å webhook –≤–∞–ª–∏–¥–Ω–∞")
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected[:10]}..., –ø–æ–ª—É—á–µ–Ω–æ: {signature[:10]}...")
            
        return is_valid
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

def _handle_telephony_session(session_data: Dict[str, Any]) -> Response:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ telephony/sessions —Å–æ–±—ã—Ç–∏–π
    
    Args:
        session_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ body
        
    Returns:
        Response: Flask –æ—Ç–≤–µ—Ç
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        telephony_session_id = session_data.get('telephonySessionId')
        parties = session_data.get('parties', [])
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ telephony session: {telephony_session_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        for party in parties:
            direction = party.get('direction')
            status = party.get('status', {})
            party_id = party.get('id')
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º party: direction={direction}, status={status}, party_id={party_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö "Proceeding", "Setup" –∏–ª–∏ "Alerting"
            incoming_statuses = ['Proceeding', 'Setup', 'Alerting', 'Ringing']
            if direction == 'Inbound' and status.get('code') in incoming_statuses:
                logger.info(f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫: session={telephony_session_id}, party={party_id}, status={status.get('code')}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
                call_data = {
                    "callId": f"{telephony_session_id}_{party_id}",
                    "telephonySessionId": telephony_session_id,
                    "partyId": party_id,
                    "from": party.get('from', {}),
                    "to": party.get('to', {}),
                    "direction": direction,
                    "status": status,
                    "timestamp": datetime.now().isoformat()
                }
                
                logger.info(f"üìû –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: {call_data}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
                with call_lock:
                    active_calls[call_data["callId"]] = call_data
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(target=process_call, args=(call_data,))
                thread.daemon = True
                thread.start()
                logger.info(f"üìã –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞ {call_data['callId']}")
            else:
                if direction == 'Inbound':
                    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status.get('code')} (–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞)")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
                if party_id:
                    call_id = f"{telephony_session_id}_{party_id}"
                    with call_lock:
                        if call_id in active_calls:
                            active_calls[call_id]["status"] = status
                            active_calls[call_id]["last_update"] = datetime.now().isoformat()
                            
                            # –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                            if status.get('code') in ['Disconnected', 'Gone']:
                                logger.info(f"–ó–≤–æ–Ω–æ–∫ {call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                                del active_calls[call_id]
        
        return jsonify({"status": "processed"}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ telephony session: {e}")
        return jsonify({"error": str(e)}), 500

async def _answer_and_process_call(call_data: Dict[str, Any]):
    """
    –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –∏ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    Args:
        call_data: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ
    """
    try:
        telephony_session_id = call_data['telephonySessionId']
        party_id = call_data['partyId']
        call_id = call_data['callId']
        
        logger.info(f"üìû –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}")
        logger.info(f"üîó Session: {telephony_session_id}, Party: {party_id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API
        try:
            logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            answer_response = make_request(
                'POST',
                f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/answer'
            )
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}")
            logger.info(f"üìã –û—Ç–≤–µ—Ç API: {answer_response}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Voice AI
        await asyncio.sleep(1)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ Voice AI Engine –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Voice AI –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        try:
            response = await voice_ai_engine.handle_incoming_call(call_data)
            logger.info(f"‚úÖ Voice AI –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–≤–æ–Ω–æ–∫ {call_id}: {response}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Voice AI –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

@app.route('/calls', methods=['GET'])
def get_active_calls():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        with call_lock:
            calls_list = list(active_calls.values())
        return jsonify({
            "total": len(calls_list),
            "calls": calls_list
        }), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/call/<call_id>/transfer', methods=['POST'])
def transfer_call(call_id: str):
    """
    –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω–æ–∫ –Ω–∞ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä
    
    Body:
        {
            "transferTo": "+1234567890",
            "transferType": "blind" // –∏–ª–∏ "attended"
        }
    """
    try:
        data = request.get_json()
        transfer_to = data.get('transferTo')
        transfer_type = data.get('transferType', 'blind')
        
        if not transfer_to:
            return jsonify({"error": "transferTo is required"}), 400
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫
        with call_lock:
            call_data = active_calls.get(call_id)
        
        if not call_data:
            return jsonify({"error": "Call not found"}), 404
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API
        try:
            transfer_data = {
                "phoneNumber": transfer_to,
                "transferType": transfer_type
            }
            
            make_request(
                'POST',
                f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{call_data["telephonySessionId"]}/parties/{call_data["partyId"]}/transfer',
                transfer_data
            )
            
            return jsonify({"status": "transferred"}), 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            return jsonify({"error": "Transfer failed"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–æ–Ω–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/call/<call_id>/hangup', methods=['DELETE'])
def hangup_call(call_id: str):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫
        with call_lock:
            call_data = active_calls.get(call_id)
        
        if not call_data:
            return jsonify({"error": "Call not found"}), 404
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ RingCentral API
        try:
            make_ringcentral_request(
                'DELETE',
                f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{call_data["telephonySessionId"]}/parties/{call_data["partyId"]}'
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            with call_lock:
                if call_id in active_calls:
                    del active_calls[call_id]
            return jsonify({"status": "hangup"}), 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
            return jsonify({"error": "Hangup failed"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/subscription/create', methods=['POST'])
def create_subscription():
    """–°–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        async def do_create_subscription():
            return await _create_webhook_subscription()
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        subscription_info = loop.run_until_complete(do_create_subscription())
        loop.close()
        
        if subscription_info:
            global subscription_id
            subscription_id = subscription_info['id']
            return jsonify(subscription_info), 200
        else:
            return jsonify({"error": "Failed to create subscription"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return jsonify({"error": str(e)}), 500

async def _create_webhook_subscription():
    """–°–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è telephony/sessions —Å–æ–±—ã—Ç–∏–π"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        event_filters = [
            '/restapi/v1.0/account/~/extension/~/telephony/sessions'
        ]
        
        # ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ delivery_mode –¥–ª—è RingCentral
        delivery_mode = {
            'transportType': 'WebHook',
            'address': Config.RINGCENTRAL['webhook_url'],
            'encryption': False  # –ò–ª–∏ True —Å encryptionKey –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —à–∏—Ñ—Ä–∞—Ü–∏—è
        }
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º webhook –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {Config.RINGCENTRAL['webhook_url']}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_data = {
            'eventFilters': event_filters,
            'deliveryMode': delivery_mode,
            'expiresIn': 86400  # 24 —á–∞—Å–∞
        }
        
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {json.dumps(subscription_data, indent=2)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from ringcentral_auth import make_request
        subscription_info = make_request('POST', '/restapi/v1.0/subscription', subscription_data)
        
        logger.info(f"Webhook –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {subscription_info['id']}")
        return subscription_info
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return None

async def initialize_ringcentral():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    global subscription_id
    
    try:
        logger.info("üöÄ Starting Voice AI System...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RingCentral —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from ringcentral_auth import authenticate, get_auth_status
        if authenticate():
            status = get_auth_status()
            logger.info(f"üìû RingCentral –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {status['auth_method']}")
            logger.info("‚úÖ RingCentral connection test passed")
        else:
            logger.warning("‚ö†Ô∏è RingCentral connection test failed")
        
        # –°–æ–∑–¥–∞–µ–º webhook –ø–æ–¥–ø–∏—Å–∫—É
        subscription_info = await _create_webhook_subscription()
        if subscription_info:
            subscription_id = subscription_info['id']
            logger.info(f"Webhook –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {subscription_id}")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å webhook –ø–æ–¥–ø–∏—Å–∫—É")
            
    except Exception as e:
        logger.error(f"üí• Application startup failed: {e}")
        raise

def start_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {Config.WEBHOOK['host']}:{Config.WEBHOOK['port']}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RingCentral –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def init_ringcentral():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(initialize_ringcentral())
            loop.close()
        
        init_thread = threading.Thread(target=init_ringcentral)
        init_thread.daemon = True
        init_thread.start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Voice AI engine
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Voice AI engine...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.run(
            host=Config.WEBHOOK["host"],
            port=Config.WEBHOOK["port"],
            debug=Config.WEBHOOK["debug"],
            threaded=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"Internal server error: {error}")
    return jsonify({"error": "Internal server error"}), 500

@app.route('/call', methods=['POST'])
def handle_incoming_call():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é"""
    try:
        logger.info("üìû –ü–æ–ª—É—á–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
        call_data = request.get_json()
        if not call_data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–µ")
            return jsonify({"error": "No call data"}), 400
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: {json.dumps(call_data, indent=2)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        from_number = call_data.get('from', {}).get('phoneNumber', 'Unknown')
        to_number = call_data.get('to', {}).get('phoneNumber', 'Unknown')
        
        logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç {from_number} –Ω–∞ {to_number}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=process_call, args=(call_data,))
        thread.daemon = True
        thread.start()
        
        return jsonify({
            "status": "received",
            "message": "Call processed",
            "from": from_number,
            "to": to_number
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

def process_call(call_data: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    Args:
        call_data: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç webhook –∏–ª–∏ External App)
    """
    try:
        logger.info(f"üìû –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞: {call_data}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤–æ–Ω–∫–∞
        source = call_data.get('source', 'webhook')
        
        if source == 'external_app':
            # –ó–≤–æ–Ω–æ–∫ –æ—Ç External App (GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
            caller = call_data.get('caller', 'Unknown')
            name = call_data.get('name', 'Unknown')
            called = call_data.get('called', 'Unknown')
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç External App:")
            logger.info(f"   –ó–≤–æ–Ω—è—â–∏–π: {caller}")
            logger.info(f"   –ò–º—è: {name}")
            logger.info(f"   –í—ã–∑—ã–≤–∞–µ–º—ã–π –Ω–æ–º–µ—Ä: {called}")
            
            # –î–ª—è External App –∑–≤–æ–Ω–∫–æ–≤ –º—ã –Ω–µ –º–æ–∂–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å
            # —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç telephony session ID
            logger.info("‚ö†Ô∏è External App –∑–≤–æ–Ω–æ–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            greeting = f"Hi {name}! Welcome to Prime Cargo Logistics! I'm here to help you with anything you need today! How can I assist you?"
            
        else:
            # –ó–≤–æ–Ω–æ–∫ –æ—Ç webhook (–µ—Å—Ç—å telephony session ID)
            telephony_session_id = call_data.get('telephonySessionId')
            party_id = call_data.get('partyId')
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç webhook:")
            logger.info(f"   Session ID: {telephony_session_id}")
            logger.info(f"   Party ID: {party_id}")
            
            # 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
            if telephony_session_id and party_id:
                logger.info("üìû –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫...")
                try:
                    make_request(
                        'POST',
                        f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/answer'
                    )
                    logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {e}")
            
            greeting = "Hi there! Welcome to Prime Cargo Logistics! I'm here to help you with anything you need today! How can I assist you?"
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        logger.info("üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º TTS –∞—É–¥–∏–æ
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            audio_file = loop.run_until_complete(async_synthesize(greeting))
            logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(audio_file)} –±–∞–π—Ç –∞—É–¥–∏–æ")
        finally:
            loop.close()
        
        # 3. –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è webhook –∑–≤–æ–Ω–∫–æ–≤)
        if source == 'webhook' and telephony_session_id and party_id and audio_file:
            try:
                logger.info("üîä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–æ–∫...")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–æ–∫
                make_request(
                    'POST',
                    f'/restapi/v1.0/account/~/extension/~/telephony/sessions/{telephony_session_id}/parties/{party_id}/play',
                    {
                        'audioFile': audio_file,
                        'playMode': 'play'
                    }
                )
                logger.info("üîä –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∑–≤–æ–Ω–æ–∫")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        elif source == 'external_app':
            logger.info("üìù External App –∑–≤–æ–Ω–æ–∫ - –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            import os
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"recordings/external_call_{timestamp}.wav"
            os.makedirs("recordings", exist_ok=True)
            with open(filename, "wb") as f:
                f.write(audio_file)
            logger.info(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

if __name__ == '__main__':
    start_server()