#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è JWT —Ç–æ–∫–µ–Ω–∞ RingCentral
"""

import os
import jwt
import time
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

def decode_jwt_without_verification(token):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è payload)"""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏
        parts = token.split('.')
        if len(parts) != 3:
            return None
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
        import base64
        import json
        
        # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        payload = parts[1]
        padding = 4 - len(payload) % 4
        if padding != 4:
            payload += '=' * padding
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        decoded = base64.urlsafe_b64decode(payload)
        payload_data = json.loads(decoded.decode('utf-8'))
        
        return payload_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT: {e}")
        return None

def check_jwt_expiry():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–†–û–ö–ê –î–ï–ô–°–¢–í–ò–Ø JWT –¢–û–ö–ï–ù–ê")
    print("=" * 50)
    
    jwt_token = os.getenv('RINGCENTRAL_JWT_TOKEN')
    
    if not jwt_token:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"üìù JWT Token: {jwt_token[:50]}...")
    print()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT
    payload = decode_jwt_without_verification(jwt_token)
    
    if not payload:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    exp_timestamp = payload.get('exp')
    iat_timestamp = payload.get('iat')
    
    if not exp_timestamp:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è")
        return False
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = int(time.time())
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    exp_date = datetime.fromtimestamp(exp_timestamp)
    iat_date = datetime.fromtimestamp(iat_timestamp) if iat_timestamp else None
    current_date = datetime.fromtimestamp(current_time)
    
    print(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {iat_date}")
    print(f"üìÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {exp_date}")
    print(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_date}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    time_until_expiry = exp_timestamp - current_time
    
    if time_until_expiry <= 0:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –ò–°–¢–ï–ö!")
        print(f"   –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ {abs(time_until_expiry)} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥")
        return False
    elif time_until_expiry < 3600:  # –ú–µ–Ω—å—à–µ 1 —á–∞—Å–∞
        print("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!")
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {time_until_expiry} —Å–µ–∫—É–Ω–¥ ({time_until_expiry//3600} —á–∞—Å–æ–≤)")
        return False
    else:
        hours_remaining = time_until_expiry // 3600
        days_remaining = hours_remaining // 24
        print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {time_until_expiry} —Å–µ–∫—É–Ω–¥")
        print(f"   –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ: {hours_remaining} —á–∞—Å–æ–≤ ({days_remaining} –¥–Ω–µ–π)")
        return True

def check_jwt_payload():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JWT payload"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó JWT PAYLOAD")
    print("=" * 30)
    
    jwt_token = os.getenv('RINGCENTRAL_JWT_TOKEN')
    payload = decode_jwt_without_verification(jwt_token)
    
    if not payload:
        return
    
    print("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JWT —Ç–æ–∫–µ–Ω–∞:")
    for key, value in payload.items():
        if key == 'exp':
            exp_date = datetime.fromtimestamp(value)
            print(f"   {key}: {value} ({exp_date})")
        elif key == 'iat':
            iat_date = datetime.fromtimestamp(value)
            print(f"   {key}: {value} ({iat_date})")
        else:
            print(f"   {key}: {value}")

if __name__ == "__main__":
    is_valid = check_jwt_expiry()
    check_jwt_payload()
    
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if is_valid:
        print("‚úÖ JWT —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ Developer Console")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã Webhook Subscriptions")
    else:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ RingCentral Developer Console")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ RINGCENTRAL_JWT_TOKEN –≤ .env")
