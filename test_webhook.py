#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook endpoints
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å RingCentral webhook
"""

import requests
import json
import hmac
import hashlib
import base64
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBHOOK_URL = "http://localhost:5000/webhook"
WEBHOOK_SECRET = "1Z7ztKD0I1gBu1QscmOBkonCn1tXG7LN"  # –ò–∑ config.py

def print_test_header(test_name):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞"""
    print(f"\n{'=' * 60}")
    print(f"üß™ –¢–ï–°–¢: {test_name}")
    print(f"{'=' * 60}")

def print_result(success, message, details=None):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
    if success:
        print(f"‚úÖ –£–°–ü–ï–•: {message}")
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {message}")
    
    if details:
        print(f"–î–µ—Ç–∞–ª–∏: {details}")

def generate_signature(body, secret):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ webhook –∫–∞–∫ –≤ RingCentral"""
    signature = base64.b64encode(
        hmac.new(
            secret.encode('utf-8'),
            body,
            hashlib.sha1
        ).digest()
    ).decode()
    return signature

def test_empty_post():
    """–¢–µ—Å—Ç 1: –ü—É—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å"""
    print_test_header("–ü—É—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π POST –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        response = requests.post(WEBHOOK_URL, data='', headers={})
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'ok':
                print_result(True, f"–ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            else:
                print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_get_with_challenge():
    """–¢–µ—Å—Ç 2: GET –∑–∞–ø—Ä–æ—Å —Å hub.challenge"""
    print_test_header("GET –∑–∞–ø—Ä–æ—Å —Å challenge")
    
    try:
        challenge = "test123"
        response = requests.get(f"{WEBHOOK_URL}?hub.challenge={challenge}")
        
        if response.status_code == 200 and response.text == challenge:
            print_result(True, f"Challenge –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {response.text}")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: –∫–æ–¥={response.status_code}, —Ç–µ–∫—Å—Ç={response.text}")
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_get_without_challenge():
    """–¢–µ—Å—Ç 3: GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ hub.challenge"""
    print_test_header("GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ challenge")
    
    try:
        response = requests.get(WEBHOOK_URL)
        
        if response.status_code == 400:
            print_result(True, f"–ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ 400")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_post_with_json():
    """–¢–µ—Å—Ç 4: POST –∑–∞–ø—Ä–æ—Å —Å JSON –¥–∞–Ω–Ω—ã–º–∏"""
    print_test_header("POST –∑–∞–ø—Ä–æ—Å —Å JSON")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = {
            "uuid": "12345678-1234-1234-1234-123456789012",
            "event": "/restapi/v1.0/account/~/extension/~/telephony/sessions",
            "timestamp": "2024-01-15T10:00:00.000Z",
            "body": {
                "telephonySessionId": "s-1234567890",
                "parties": []
            }
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
        body = json.dumps(webhook_data).encode('utf-8')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = generate_signature(body, WEBHOOK_SECRET)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            'Content-Type': 'application/json',
            'X-RC-Signature': signature
        }
        
        response = requests.post(WEBHOOK_URL, data=body, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            print_result(True, f"–ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_post_with_invalid_signature():
    """–¢–µ—Å—Ç 5: POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é"""
    print_test_header("POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é")
    
    try:
        webhook_data = {"test": "data"}
        body = json.dumps(webhook_data).encode('utf-8')
        
        headers = {
            'Content-Type': 'application/json',
            'X-RC-Signature': 'invalid_signature_123'
        }
        
        response = requests.post(WEBHOOK_URL, data=body, headers=headers)
        
        if response.status_code == 401:
            print_result(True, f"–ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ 401 (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_post_with_invalid_json():
    """–¢–µ—Å—Ç 6: POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON"""
    print_test_header("POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        body = b'{"invalid": json}'  # –ù–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏
        
        headers = {
            'Content-Type': 'application/json'
        }
        
        response = requests.post(WEBHOOK_URL, data=body, headers=headers)
        
        if response.status_code == 400:
            print_result(True, f"–ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ 400 (bad request)")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_post_without_content_type():
    """–¢–µ—Å—Ç 7: POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ Content-Type header"""
    print_test_header("POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ Content-Type")
    
    try:
        # RingCentral –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å POST –±–µ–∑ Content-Type
        webhook_data = {"test": "data"}
        body = json.dumps(webhook_data).encode('utf-8')
        
        # –ë–µ–∑ Content-Type header
        headers = {}
        
        response = requests.post(WEBHOOK_URL, data=body, headers=headers)
        
        if response.status_code == 200:
            print_result(True, f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {response.json()}")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def test_telephony_event():
    """–¢–µ—Å—Ç 8: –†–µ–∞–ª—å–Ω–æ–µ telephony —Å–æ–±—ã—Ç–∏–µ"""
    print_test_header("Telephony —Å–æ–±—ã—Ç–∏–µ")
    
    try:
        # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ webhook –æ—Ç RingCentral
        webhook_data = {
            "uuid": "4b4f9344-d13f-4f86-be95-3b96e8c82cc0",
            "event": "/restapi/v1.0/account/~/extension/~/telephony/sessions",
            "timestamp": "2024-01-15T10:00:00.000Z",
            "subscriptionId": "5b5f9344-d13f-4f86-be95-3b96e8c82cc0",
            "body": {
                "telephonySessionId": "s-ec0c920e98654d38a8e045d13b96e8c8",
                "serverId": "10.13.22.239.TAM",
                "eventTime": "2024-01-15T10:00:00.000Z",
                "parties": [
                    {
                        "accountId": "2069909019",
                        "extensionId": "2069909019",
                        "id": "p-ec0c920e98654d38a8e045d13b96e8c8-2",
                        "direction": "Inbound",
                        "to": {
                            "phoneNumber": "+15135725833",
                            "name": "Prime Cargo",
                            "extensionId": "2069909019"
                        },
                        "from": {
                            "phoneNumber": "+12345678901",
                            "name": "External Caller"
                        },
                        "status": {
                            "code": "Proceeding",
                            "rcc": false,
                            "mobilePickupData": {}
                        }
                    }
                ],
                "origin": {
                    "type": "Call"
                }
            }
        }
        
        body = json.dumps(webhook_data).encode('utf-8')
        signature = generate_signature(body, WEBHOOK_SECRET)
        
        headers = {
            'Content-Type': 'application/json',
            'X-RC-Signature': signature
        }
        
        response = requests.post(WEBHOOK_URL, data=body, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            print_result(True, f"Telephony —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {data}")
        else:
            print_result(False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}", 
                        response.text)
            
    except Exception as e:
        print_result(False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print(f"üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBHOOK ENDPOINTS")
    print(f"üìç URL: {WEBHOOK_URL}")
    print(f"üîë Secret: {WEBHOOK_SECRET[:10]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://localhost:5000/health", timeout=2)
        if response.status_code == 200:
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ {response.status_code}")
            sys.exit(1)
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook_server.py –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_empty_post,
        test_get_with_challenge,
        test_get_without_challenge,
        test_post_with_json,
        test_post_with_invalid_signature,
        test_post_with_invalid_json,
        test_post_without_content_type,
        test_telephony_event
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–≤–æ–¥–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            passed += 1
        except:
            failed += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'=' * 60}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'=' * 60}")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(tests)}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
    
    if failed == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")

if __name__ == "__main__":
    main()