#!/bin/bash

# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Voice AI —Å–∏—Å—Ç–µ–º—ã —Å WebPhone
# Prime Cargo Logistics

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ü–û–õ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê VOICE AI –°–ò–°–¢–ï–ú–´ –° WEBPHONE"
echo "=================================================="
echo "Prime Cargo Logistics - Voice AI Call System"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}‚û§${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
check_os() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        print_success "Linux –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        print_success "macOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        OS="macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        print_success "Windows (WSL/Cygwin) –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        OS="windows"
    else
        print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OSTYPE"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    fi
    print_success "Python 3 –Ω–∞–π–¥–µ–Ω: $(python3 --version)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if ! command -v pip3 &> /dev/null; then
        print_error "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip"
        exit 1
    fi
    print_success "pip3 –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if ! command -v node &> /dev/null; then
        print_warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        
        if [[ "$OS" == "linux" ]]; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
        elif [[ "$OS" == "macos" ]]; then
            if command -v brew &> /dev/null; then
                brew install node
            else
                print_error "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é: https://nodejs.org/"
                exit 1
            fi
        else
            print_error "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: https://nodejs.org/"
            exit 1
        fi
    fi
    print_success "Node.js –Ω–∞–π–¥–µ–Ω: $(node --version)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    if ! command -v npm &> /dev/null; then
        print_error "npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js"
        exit 1
    fi
    print_success "npm –Ω–∞–π–¥–µ–Ω: $(npm --version)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
    for cmd in curl wget git; do
        if ! command -v $cmd &> /dev/null; then
            print_warning "$cmd –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è"
        else
            print_success "$cmd –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    directories=(
        "logs"
        "recordings"
        "temp"
        "backups"
    )
    
    for dir in "${directories[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            print_success "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
        else
            print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dir"
        fi
    done
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python_deps() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    python3 -m pip install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "requirements.txt" ]; then
        print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt..."
        pip3 install -r requirements.txt
        print_success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    critical_deps=("torch" "whisper" "flask" "websockets")
    for dep in "${critical_deps[@]}"; do
        if python3 -c "import $dep" 2>/dev/null; then
            print_success "$dep —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_warning "$dep –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        fi
    done
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_node_deps() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [ -d "webphone-bridge" ]; then
        cd webphone-bridge
        
        if [ -f "package.json" ]; then
            npm install
            print_success "Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            print_error "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ webphone-bridge!"
            exit 1
        fi
        
        cd ..
    else
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è webphone-bridge –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_configuration() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files=(
        "config.py"
        "voice_ai_engine.py"
        "webhook_server.py"
        "audio_stream_handler.py"
        "webphone-bridge/webphone_bridge.js"
        "webphone-bridge/package.json"
    )
    
    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            print_success "–ù–∞–π–¥–µ–Ω: $file"
        else
            print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: $file"
            exit 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RingCentral
    if grep -q "bXCZ510zNmybxAUXGIZruT" config.py; then
        print_success "RingCentral Client ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_warning "RingCentral Client ID –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
test_system() {
    print_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    chmod +x test_webphone_integration.py
    
    print_step "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ Python
    if python3 -c "
import flask
import websockets
import torch
import whisper
from config import Config
print('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ Python –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')
"; then
        print_success "Python –º–æ–¥—É–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
    else
        print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Python –º–æ–¥—É–ª—è–º–∏"
        exit 1
    fi
    
    # –¢–µ—Å—Ç Node.js –º–æ–¥—É–ª–µ–π
    cd webphone-bridge
    if node -e "
const SDK = require('@ringcentral/sdk');
const WebPhone = require('ringcentral-web-phone');
const axios = require('axios');
console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ Node.js –º–æ–¥—É–ª–∏ –Ω–∞–π–¥–µ–Ω—ã');
"; then
        print_success "Node.js –º–æ–¥—É–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
    else
        print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Node.js –º–æ–¥—É–ª—è–º–∏"
        exit 1
    fi
    cd ..
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞-–ø—Ä–∏–º–µ—Ä–∞
create_env_example() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞-–ø—Ä–∏–º–µ—Ä–∞..."
    
    if [ ! -f ".env.example" ]; then
        cat > .env.example << 'EOF'
# RingCentral –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RINGCENTRAL_CLIENT_ID=your_client_id_here
RINGCENTRAL_CLIENT_SECRET=your_client_secret_here
RINGCENTRAL_JWT_TOKEN=your_jwt_token_here
RINGCENTRAL_SERVER=https://platform.ringcentral.com
RINGCENTRAL_MAIN_NUMBER=your_main_number_here

# Python AI Server
PYTHON_AI_SERVER=http://localhost:5000
PYTHON_AI_ENDPOINT=/api/handle-webphone-call

# WebSocket –∏ –∞—É–¥–∏–æ
WEBSOCKET_PORT=8080
AUDIO_SAMPLE_RATE=16000
AUDIO_CHANNELS=1

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=info

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
MAX_CONCURRENT_CALLS=5
USE_GPU=true

# Webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
WEBHOOK_URL=https://your-ngrok-url.ngrok.io/webhook
WEBHOOK_SECRET=your_webhook_secret
EOF
        print_success "–°–æ–∑–¥–∞–Ω .env.example —Ñ–∞–π–ª"
        print_warning "–í–ê–ñ–ù–û: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!"
    else
        print_success ".env.example —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
create_quick_scripts() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞..."
    
    # –î–µ–ª–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    chmod +x start_system.sh
    chmod +x stop_system.sh
    
    # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    cat > check_status.sh << 'EOF'
#!/bin/bash
echo "üìä –°–¢–ê–¢–£–° VOICE AI –°–ò–°–¢–ï–ú–´"
echo "=========================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
if pgrep -f "python.*webhook_server.py" > /dev/null; then
    echo "‚úÖ Python AI Server: –ó–ê–ü–£–©–ï–ù"
else
    echo "‚ùå Python AI Server: –û–°–¢–ê–ù–û–í–õ–ï–ù"
fi

if pgrep -f "node.*webphone_bridge.js" > /dev/null; then
    echo "‚úÖ WebPhone Bridge: –ó–ê–ü–£–©–ï–ù"
else
    echo "‚ùå WebPhone Bridge: –û–°–¢–ê–ù–û–í–õ–ï–ù"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
if netstat -tuln 2>/dev/null | grep -q ":5000 "; then
    echo "‚úÖ –ü–æ—Ä—Ç 5000 (Python): –û–¢–ö–†–´–¢"
else
    echo "‚ùå –ü–æ—Ä—Ç 5000 (Python): –ó–ê–ö–†–´–¢"
fi

if netstat -tuln 2>/dev/null | grep -q ":8080 "; then
    echo "‚úÖ –ü–æ—Ä—Ç 8080 (WebSocket): –û–¢–ö–†–´–¢"
else
    echo "‚ùå –ü–æ—Ä—Ç 8080 (WebSocket): –ó–ê–ö–†–´–¢"
fi

echo ""
echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
echo "   Health Check: curl http://localhost:5000/health"
echo "   WebPhone Status: curl http://localhost:5000/api/webphone/status"
echo ""
echo "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "   Python: tail -f logs/python-server.log"
echo "   WebPhone: tail -f logs/webphone-bridge.log"
EOF
    chmod +x check_status.sh
    print_success "–°–æ–∑–¥–∞–Ω check_status.sh"
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    cat > run_full_test.sh << 'EOF'
#!/bin/bash
echo "üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´"
echo "==============================="
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
./check_status.sh

echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
sleep 5

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
python3 test_webphone_integration.py
EOF
    chmod +x run_full_test.sh
    print_success "–°–æ–∑–¥–∞–Ω run_full_test.sh"
}

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
final_report() {
    echo ""
    echo "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
    echo "================================"
    echo ""
    echo "üìã –ß—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:"
    echo "   ‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (AI, WebSocket, Flask)"
    echo "   ‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (RingCentral WebPhone)"
    echo "   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    echo "   ‚úÖ –°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    echo "   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã"
    echo ""
    echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:"
    echo "   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª: cp .env.example .env"
    echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system.sh"
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: ./check_status.sh"
    echo "   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: ./run_full_test.sh"
    echo ""
    echo "üìû –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ RingCentral WebPhone!"
    echo ""
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   ./start_system.sh     - –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"
    echo "   ./stop_system.sh      - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "   ./check_status.sh     - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
    echo "   ./run_full_test.sh    - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_WEBPHONE.md"
    echo "================================"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_os
    install_dependencies
    create_directories
    install_python_deps
    install_node_deps
    check_configuration
    test_system
    create_env_example
    create_quick_scripts
    final_report
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO"' ERR

# –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main "$@"