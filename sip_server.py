#!/usr/bin/env python3
"""
SIP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–≤–æ–Ω–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SIP/RTP –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import socket
import threading
import struct
import hashlib
import time
import re
from datetime import datetime
import logging
from sip_voice_ai_engine import VoiceAIEngine
from sip_speech_processor import SpeechProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SIPServer:
    def __init__(self, local_ip='0.0.0.0', sip_port=5060, rtp_port=10000):
        self.local_ip = local_ip
        self.sip_port = sip_port
        self.rtp_port = rtp_port
        self.calls = {}
        self.registered_users = {}
        
        # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.ai_engine = VoiceAIEngine()
        self.speech_processor = SpeechProcessor()
        
        # SIP —Å–æ–∫–µ—Ç
        self.sip_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sip_socket.bind((self.local_ip, self.sip_port))
        
        logger.info(f"üöÄ SIP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {local_ip}:{sip_port}")
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ SIP —Å–µ—Ä–≤–µ—Ä–∞"""
        while True:
            try:
                data, addr = self.sip_socket.recvfrom(65535)
                message = data.decode('utf-8')
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ SIP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {addr}")
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ SIP —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(target=self.handle_sip_message, args=(message, addr))
                thread.start()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ SIP —Å–µ—Ä–≤–µ—Ä–µ: {e}")
                
    def handle_sip_message(self, message, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ SIP —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ SIP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            lines = message.split('\r\n')
            method = lines[0].split()[0]
            
            headers = {}
            for line in lines[1:]:
                if ':' in line:
                    key, value = line.split(':', 1)
                    headers[key.strip()] = value.strip()
            
            logger.info(f"üìû SIP –º–µ—Ç–æ–¥: {method}")
            
            if method == 'REGISTER':
                self.handle_register(message, headers, addr)
            elif method == 'INVITE':
                self.handle_invite(message, headers, addr)
            elif method == 'ACK':
                self.handle_ack(message, headers, addr)
            elif method == 'BYE':
                self.handle_bye(message, headers, addr)
            elif method == 'OPTIONS':
                self.handle_options(message, headers, addr)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SIP: {e}")
            
    def handle_register(self, message, headers, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ REGISTER –∑–∞–ø—Ä–æ—Å–∞"""
        logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ REGISTER –æ—Ç {addr}")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ
        from_header = headers.get('From', '')
        to_header = headers.get('To', '')
        call_id = headers.get('Call-ID', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SIP URI
        sip_uri_match = re.search(r'<sip:(.+?)>', from_header)
        if sip_uri_match:
            sip_uri = sip_uri_match.group(1)
            self.registered_users[sip_uri] = addr
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sip_uri} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK
        response = self.create_response(message, headers, 200, 'OK')
        self.sip_socket.sendto(response.encode(), addr)
        
    def handle_invite(self, message, headers, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ INVITE –∑–∞–ø—Ä–æ—Å–∞ (–≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫)"""
        logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç {addr}")
        
        call_id = headers.get('Call-ID', '')
        from_header = headers.get('From', '')
        to_header = headers.get('To', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        self.calls[call_id] = {
            'from': from_header,
            'to': to_header,
            'addr': addr,
            'state': 'ringing',
            'rtp_port': self.rtp_port + len(self.calls)
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 100 Trying
        trying_response = self.create_response(message, headers, 100, 'Trying')
        self.sip_socket.sendto(trying_response.encode(), addr)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 180 Ringing
        time.sleep(0.1)
        ringing_response = self.create_response(message, headers, 180, 'Ringing')
        self.sip_socket.sendto(ringing_response.encode(), addr)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        time.sleep(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SDP –∏–∑ INVITE
        sdp_start = message.find('\r\n\r\n') + 4
        sdp_data = message[sdp_start:] if sdp_start > 3 else ''
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç 200 OK —Å SDP
        ok_response = self.create_200_ok_with_sdp(message, headers, self.calls[call_id]['rtp_port'])
        self.sip_socket.sendto(ok_response.encode(), addr)
        
        self.calls[call_id]['state'] = 'answered'
        logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ {call_id} –ø—Ä–∏–Ω—è—Ç, RTP –ø–æ—Ä—Ç: {self.calls[call_id]['rtp_port']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º RTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        rtp_thread = threading.Thread(target=self.handle_rtp_stream, args=(call_id,))
        rtp_thread.start()
        
    def handle_ack(self, message, headers, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ACK"""
        call_id = headers.get('Call-ID', '')
        logger.info(f"‚úÖ ACK –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        
        if call_id in self.calls:
            self.calls[call_id]['state'] = 'active'
            
    def handle_bye(self, message, headers, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ BYE (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞)"""
        call_id = headers.get('Call-ID', '')
        logger.info(f"üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ {call_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK
        response = self.create_response(message, headers, 200, 'OK')
        self.sip_socket.sendto(response.encode(), addr)
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        if call_id in self.calls:
            del self.calls[call_id]
            
    def handle_options(self, message, headers, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)"""
        response = self.create_response(message, headers, 200, 'OK')
        self.sip_socket.sendto(response.encode(), addr)
        
    def create_response(self, request, headers, code, reason):
        """–°–æ–∑–¥–∞–Ω–∏–µ SIP –æ—Ç–≤–µ—Ç–∞"""
        lines = request.split('\r\n')
        request_line = lines[0]
        
        response = f"SIP/2.0 {code} {reason}\r\n"
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for header in ['Via', 'From', 'To', 'Call-ID', 'CSeq']:
            if header in headers:
                response += f"{header}: {headers[header]}\r\n"
                
        response += f"Content-Length: 0\r\n"
        response += "\r\n"
        
        return response
        
    def create_200_ok_with_sdp(self, request, headers, rtp_port):
        """–°–æ–∑–¥–∞–Ω–∏–µ 200 OK –æ—Ç–≤–µ—Ç–∞ —Å SDP"""
        response = f"SIP/2.0 200 OK\r\n"
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for header in ['Via', 'From', 'To', 'Call-ID', 'CSeq']:
            if header in headers:
                response += f"{header}: {headers[header]}\r\n"
                
        # SDP —Ç–µ–ª–æ
        sdp = f"""v=0
o=- 0 0 IN IP4 {self.get_local_ip()}
s=-
c=IN IP4 {self.get_local_ip()}
t=0 0
m=audio {rtp_port} RTP/AVP 0 8 101
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:101 telephone-event/8000
a=sendrecv
"""
        
        response += f"Content-Type: application/sdp\r\n"
        response += f"Content-Length: {len(sdp)}\r\n"
        response += "\r\n"
        response += sdp
        
        return response
        
    def get_local_ip(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º UDP —Å–æ–∫–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except:
            return "127.0.0.1"
            
    def handle_rtp_stream(self, call_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ RTP –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞"""
        if call_id not in self.calls:
            return
            
        rtp_port = self.calls[call_id]['rtp_port']
        logger.info(f"üé§ –ó–∞–ø—É—Å–∫ RTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {rtp_port}")
        
        # –°–æ–∑–¥–∞–µ–º RTP —Å–æ–∫–µ—Ç
        rtp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        rtp_socket.bind(('0.0.0.0', rtp_port))
        rtp_socket.settimeout(1.0)
        
        audio_buffer = b''
        
        try:
            while call_id in self.calls and self.calls[call_id]['state'] == 'active':
                try:
                    # –ü–æ–ª—É—á–∞–µ–º RTP –ø–∞–∫–µ—Ç
                    data, addr = rtp_socket.recvfrom(2048)
                    
                    if len(data) > 12:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä RTP –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        # –ü–∞—Ä—Å–∏–º RTP –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        rtp_header = struct.unpack('!BBHII', data[:12])
                        payload = data[12:]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
                        audio_buffer += payload
                        
                        # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞)
                        if len(audio_buffer) > 8000:  # 8kHz * 1 —Å–µ–∫
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
                            self.process_audio_with_ai(audio_buffer, call_id, rtp_socket, addr)
                            audio_buffer = b''
                            
                except socket.timeout:
                    continue
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ RTP: {e}")
                    
        finally:
            rtp_socket.close()
            logger.info(f"üîö RTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
    def process_audio_with_ai(self, audio_data, call_id, rtp_socket, client_addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ AI –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            logger.info(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ AI –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
            text = self.speech_processor.audio_to_text(audio_data)
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
            
            if text:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
                ai_response = self.ai_engine.process_request(text)
                logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {ai_response}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∞—É–¥–∏–æ
                response_audio = self.speech_processor.text_to_audio(ai_response)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ RTP
                self.send_rtp_audio(rtp_socket, client_addr, response_audio)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI: {e}")
            
    def send_rtp_audio(self, rtp_socket, addr, audio_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ RTP"""
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ RTP –ø–∞–∫–µ—Ç–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å RTP –ø–∞–∫–µ—Ç—ã —Å timestamp –∏ sequence
        chunk_size = 160  # 20ms –ø—Ä–∏ 8kHz
        
        for i in range(0, len(audio_data), chunk_size):
            chunk = audio_data[i:i+chunk_size]
            if chunk:
                # –ü—Ä–æ—Å—Ç–æ–π RTP –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–ª–µ–π)
                rtp_header = struct.pack('!BBHII', 0x80, 0, i//chunk_size, int(time.time()), 0)
                rtp_packet = rtp_header + chunk
                rtp_socket.sendto(rtp_packet, addr)
                time.sleep(0.02)  # 20ms –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    local_ip = sys.argv[1] if len(sys.argv) > 1 else '0.0.0.0'
    sip_port = int(sys.argv[2]) if len(sys.argv) > 2 else 5060
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º SIP —Å–µ—Ä–≤–µ—Ä
    server = SIPServer(local_ip, sip_port)
    
    try:
        server.run()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SIP —Å–µ—Ä–≤–µ—Ä–∞...")
        sys.exit(0)