#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Call Control API
"""

import asyncio
import logging
import json
from datetime import datetime

from ringcentral_auth import authenticate, make_request
from speech_processor import async_synthesize

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_auth():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    logger.info("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    if authenticate():
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return True
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return False

async def test_tts():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS"""
    logger.info("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS...")
    
    test_text = "Hello! This is a test of the text to speech system. Welcome to Prime Cargo Logistics!"
    
    try:
        audio_data = await async_synthesize(test_text)
        logger.info(f"‚úÖ TTS —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(audio_data)} –±–∞–π—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"recordings/test_tts_{timestamp}.wav"
        
        with open(filename, "wb") as f:
            f.write(audio_data)
        
        logger.info(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {str(e)}")
        return False

async def test_webhook_subscription():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.info("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        response = make_request('GET', '/restapi/v1.0/subscription')
        
        if response and 'records' in response:
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(response['records'])}")
            
            for sub in response['records']:
                logger.info(f"  - ID: {sub['id']}")
                logger.info(f"    Status: {sub['status']}")
                logger.info(f"    Event filters: {sub.get('eventFilters', [])}")
                
            return True
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")
        return False

async def test_active_calls():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    logger.info("üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        response = make_request('GET', '/restapi/v1.0/account/~/extension/~/telephony/sessions')
        
        if response and 'records' in response:
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(response['records'])}")
            
            for session in response['records']:
                logger.info(f"  - Session ID: {session.get('id')}")
                logger.info(f"    Parties: {len(session.get('parties', []))}")
                
                for party in session.get('parties', []):
                    logger.info(f"      - Party: {party.get('id')}")
                    logger.info(f"        Direction: {party.get('direction')}")
                    logger.info(f"        Status: {party.get('status', {}).get('code')}")
                    
            return True
        else:
            logger.info("üìµ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–≤–æ–Ω–∫–æ–≤: {str(e)}")
        return False

async def test_media_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞"""
    logger.info("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
        test_audio = await async_synthesize("This is a test media upload.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
            tmp.write(test_audio)
            tmp_path = tmp.name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        import os
        with open(tmp_path, 'rb') as f:
            response = make_request(
                'POST',
                '/restapi/v1.0/account/~/media',
                data=None,
                files={'media': ('test.wav', f, 'audio/wav')}
            )
        
        os.unlink(tmp_path)
        
        if response and 'id' in response:
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! Media ID: {response['id']}")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {str(e)}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Call Control API...")
    logger.info("=" * 60)
    
    tests = [
        ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", test_auth),
        ("TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", test_tts),
        ("Webhook –ø–æ–¥–ø–∏—Å–∫–∞", test_webhook_subscription),
        ("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏", test_active_calls),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞", test_media_upload)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        logger.info("-" * 40)
        
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
            results.append((test_name, False))
        
        logger.info("")
    
    # –ò—Ç–æ–≥–∏
    logger.info("=" * 60)
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info("-" * 40)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{test_name:<30} {status}")
    
    logger.info("-" * 40)
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ: {passed}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    return passed == total

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(run_all_tests())
    exit(0 if success else 1)