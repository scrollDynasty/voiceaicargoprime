#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π webhook —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
import time

def test_webhook_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get('http://localhost:5000/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå Webhook —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ webhook —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def test_js_bridge_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è JS bridge"""
    try:
        response = requests.get('http://localhost:8081/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ JS Bridge —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå JS Bridge –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ JS Bridge: {e}")
        return False

def test_webhook_endpoint():
    """–¢–µ—Å—Ç webhook endpoint —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –∑–≤–æ–Ω–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Ringing"""
    webhook_data = {
        "uuid": "test-uuid-123",
        "event": "/restapi/v1.0/account/1861766019/extension/2069909019/telephony/sessions",
        "timestamp": "2025-08-26T20:00:00.000Z",
        "subscriptionId": "test-subscription",
        "ownerId": "2069909019",
        "body": {
            "sequence": 1,
            "sessionId": "test-session-123",
            "telephonySessionId": "s-test-session-123",
            "serverId": "test-server",
            "eventTime": "2025-08-26T20:00:00.000Z",
            "parties": [
                {
                    "accountId": "1861766019",
                    "extensionId": "2069909019",
                    "id": "p-test-party-123",
                    "direction": "Inbound",
                    "to": {
                        "phoneNumber": "+15139283626",
                        "name": "Test User",
                        "extensionId": "2069909019",
                        "deviceId": "805313637019"
                    },
                    "from": {
                        "phoneNumber": "101",
                        "name": "Test Caller",
                        "extensionId": "1861766019"
                    },
                    "status": {
                        "code": "Ringing",
                        "rcc": False
                    },
                    "missedCall": False,
                    "standAlone": False,
                    "muted": False
                }
            ],
            "origin": {
                "type": "Call"
            }
        }
    }
    
    try:
        response = requests.post(
            'http://localhost:5000/webhook',
            json=webhook_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Webhook endpoint –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫")
            return True
        else:
            print(f"‚ùå Webhook endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook endpoint: {e}")
        return False

def main():
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    webhook_ok = test_webhook_health()
    js_ok = test_js_bridge_health()
    
    if not webhook_ok:
        print("‚ùå Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        return
    
    print("=" * 50)
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å–æ–±—ã—Ç–∏—è
    webhook_test_ok = test_webhook_endpoint()
    
    print("=" * 50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    print(f"  - Webhook Server: {'‚úÖ' if webhook_ok else '‚ùå'}")
    print(f"  - JS Bridge: {'‚úÖ' if js_ok else '‚ùå'}")
    print(f"  - Webhook Processing: {'‚úÖ' if webhook_test_ok else '‚ùå'}")
    
    if webhook_ok and webhook_test_ok:
        print("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")

if __name__ == "__main__":
    main()